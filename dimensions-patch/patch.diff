From 0a0b88b1e6c62f54253a08a8910085c5baba1ae7 Mon Sep 17 00:00:00 2001
From: Sebastian Vollnhals <sebastian@vollnhals.info>
Date: Tue, 22 May 2012 11:38:08 +0200
Subject: [PATCH] dimensions patch

---
 xtcommerce/admin/includes/classes/categories.php   |    5 +-
 .../admin/includes/classes/shopping_cart.php       |  598 ++++++------
 xtcommerce/admin/includes/modules/new_product.php  |  666 +++++++-------
 xtcommerce/includes/classes/order.php              |  849 +++++++++---------
 xtcommerce/includes/classes/shopping_cart.php      |  964 ++++++++++----------
 xtcommerce/lang/english/admin/categories.php       |  388 ++++----
 xtcommerce/lang/german/admin/categories.php        |  383 ++++----
 7 files changed, 1947 insertions(+), 1906 deletions(-)

diff --git a/admin/includes/classes/categories.php b/admin/includes/classes/categories.php
index 002d6bc..2577840 100644
--- a/admin/includes/classes/categories.php
+++ b/admin/includes/classes/categories.php
@@ -499,7 +499,7 @@ class categories {
 			}
 		}
 		//
-		$sql_data_array = array ('products_quantity' => xtc_db_prepare_input($products_data['products_quantity']), 'products_model' => xtc_db_prepare_input($products_data['products_model']), 'products_ean' => xtc_db_prepare_input($products_data['products_ean']), 'products_price' => xtc_db_prepare_input($products_data['products_price']), 'products_sort' => xtc_db_prepare_input($products_data['products_sort']), 'products_shippingtime' => xtc_db_prepare_input($products_data['shipping_status']), 'products_discount_allowed' => xtc_db_prepare_input($products_data['products_discount_allowed']), 'products_date_available' => $products_date_available, 'products_weight' => xtc_db_prepare_input($products_data['products_weight']), 'products_status' => $products_status, 'products_startpage' => xtc_db_prepare_input($products_data['products_startpage']), 'products_startpage_sort' => xtc_db_prepare_input($products_data['products_startpage_sort']), 'products_tax_class_id' => xtc_db_prepare_input($products_data['products_tax_class_id']), 'product_template' => xtc_db_prepare_input($products_data['info_template']), 'options_template' => xtc_db_prepare_input($products_data['options_template']), 'manufacturers_id' => xtc_db_prepare_input($products_data['manufacturers_id']), 'products_fsk18' => xtc_db_prepare_input($products_data['fsk18']), 'products_vpe_value' => xtc_db_prepare_input($products_data['products_vpe_value']), 'products_vpe_status' => xtc_db_prepare_input($products_data['products_vpe_status']), 'products_vpe' => xtc_db_prepare_input($products_data['products_vpe']));
+      $sql_data_array = array ('products_quantity' => xtc_db_prepare_input($products_data['products_quantity']), 'products_model' => xtc_db_prepare_input($products_data['products_model']), 'products_ean' => xtc_db_prepare_input($products_data['products_ean']), 'products_price' => xtc_db_prepare_input($products_data['products_price']), 'products_sort' => xtc_db_prepare_input($products_data['products_sort']), 'products_shippingtime' => xtc_db_prepare_input($products_data['shipping_status']), 'products_discount_allowed' => xtc_db_prepare_input($products_data['products_discount_allowed']), 'products_date_available' => $products_date_available, 'products_weight' => xtc_db_prepare_input($products_data['products_weight']), 'products_width' => xtc_db_prepare_input($products_data['products_width']), 'products_length' => xtc_db_prepare_input($products_data['products_length']), 'products_height' => xtc_db_prepare_input($products_data['products_height']), 'products_status' => $products_status, 'products_startpage' => xtc_db_prepare_input($products_data['products_startpage']), 'products_startpage_sort' => xtc_db_prepare_input($products_data['products_startpage_sort']), 'products_tax_class_id' => xtc_db_prepare_input($products_data['products_tax_class_id']), 'product_template' => xtc_db_prepare_input($products_data['info_template']), 'options_template' => xtc_db_prepare_input($products_data['options_template']), 'manufacturers_id' => xtc_db_prepare_input($products_data['manufacturers_id']), 'products_fsk18' => xtc_db_prepare_input($products_data['fsk18']), 'products_vpe_value' => xtc_db_prepare_input($products_data['products_vpe_value']), 'products_vpe_status' => xtc_db_prepare_input($products_data['products_vpe_status']), 'products_vpe' => xtc_db_prepare_input($products_data['products_vpe']));
 		$sql_data_array = array_merge($sql_data_array, $permission_array);
 		//get the next ai-value from table products if no products_id is set
 		if (!$products_id || $products_id == '') {
@@ -750,6 +750,9 @@ class categories {
 						'products_date_added'=>'now()',
 						'products_date_available'=>$product['products_date_available'],
 						'products_weight'=>$product['products_weight'],
+                  'products_width'=>$product['products_width'],
+                  'products_length'=>$product['products_length'],
+                  'products_height'=>$product['products_height'],
 						'products_status'=>$products_status,
 						'products_tax_class_id'=>$product['products_tax_class_id'],
 						'manufacturers_id'=>$product['manufacturers_id'],
diff --git a/admin/includes/classes/shopping_cart.php b/admin/includes/classes/shopping_cart.php
index 58d5011..ad63d89 100644
--- a/admin/includes/classes/shopping_cart.php
+++ b/admin/includes/classes/shopping_cart.php
@@ -1,299 +1,301 @@
-<?php
-/* --------------------------------------------------------------
-   $Id: shopping_cart.php 950 2005-05-14 16:45:21Z mz $   
-
-   XT-Commerce - community made shopping
-   http://www.xt-commerce.com
-
-   Copyright (c) 2003 XT-Commerce
-   --------------------------------------------------------------
-   based on: 
-   (c) 2000-2001 The Exchange Project  (earlier name of osCommerce)
-   (c) 2002-2003 osCommerce(shopping_cart.php,v 1.7 2002/05/16); www.oscommerce.com 
-   (c) 2003	 nextcommerce (shopping_cart.php,v 1.6 2003/08/18); www.nextcommerce.org
-
-   Released under the GNU General Public License 
-   --------------------------------------------------------------*/
-defined( '_VALID_XTC' ) or die( 'Direct Access to this location is not allowed.' );
-  class shoppingCart {
-    var $contents, $total, $weight;
-
-    function shoppingCart() {
-      $this->reset();
-    }
-
-    function restore_contents() {
-
-      if (!$_SESSION['customer_id']) return 0;
-
-      // insert current cart contents in database
-      if ($this->contents) {
-        reset($this->contents);
-        while (list($products_id, ) = each($this->contents)) {
-          $qty = $this->contents[$products_id]['qty'];
-          $product_query = xtc_db_query("select products_id from " . TABLE_CUSTOMERS_BASKET . " where customers_id = '" . $_SESSION['customer_id'] . "' and products_id = '" . $products_id . "'");
-          if (!xtc_db_num_rows($product_query)) {
-            xtc_db_query("insert into " . TABLE_CUSTOMERS_BASKET . " (customers_id, products_id, customers_basket_quantity, customers_basket_date_added) values ('" . $_SESSION['customer_id'] . "', '" . $products_id . "', '" . $qty . "', '" . date('Ymd') . "')");
-            if ($this->contents[$products_id]['attributes']) {
-              reset($this->contents[$products_id]['attributes']);
-              while (list($option, $value) = each($this->contents[$products_id]['attributes'])) {
-                xtc_db_query("insert into " . TABLE_CUSTOMERS_BASKET_ATTRIBUTES . " (customers_id, products_id, products_options_id, products_options_value_id) values ('" . $_SESSION['customer_id'] . "', '" . $products_id . "', '" . $option . "', '" . $value . "')");
-              }
-            }
-          } else {
-            xtc_db_query("update " . TABLE_CUSTOMERS_BASKET . " set customers_basket_quantity = '" . $qty . "' where customers_id = '" . $_SESSION['customer_id'] . "' and products_id = '" . $products_id . "'");
-          }
-        }
-      }
-
-      // reset per-session cart contents, but not the database contents
-      $this->reset(FALSE);
-
-      $products_query = xtc_db_query("select products_id, customers_basket_quantity from " . TABLE_CUSTOMERS_BASKET . " where customers_id = '" . $_SESSION['customer_id'] . "'");
-      while ($products = xtc_db_fetch_array($products_query)) {
-        $this->contents[$products['products_id']] = array('qty' => $products['customers_basket_quantity']);
-        // attributes
-        $attributes_query = xtc_db_query("select products_options_id, products_options_value_id from " . TABLE_CUSTOMERS_BASKET_ATTRIBUTES . " where customers_id = '" . $_SESSION['customer_id'] . "' and products_id = '" . $products['products_id'] . "'");
-        while ($attributes = xtc_db_fetch_array($attributes_query)) {
-          $this->contents[$products['products_id']]['attributes'][$attributes['products_options_id']] = $attributes['products_options_value_id'];
-        }
-      }
-
-      $this->cleanup();
-    }
-
-    function reset($reset_database = FALSE) {
-
-      $this->contents = array();
-      $this->total = 0;
-
-      if ($_SESSION['customer_id'] && $reset_database) {
-        xtc_db_query("delete from " . TABLE_CUSTOMERS_BASKET . " where customers_id = '" . $_SESSION['customer_id'] . "'");
-        xtc_db_query("delete from " . TABLE_CUSTOMERS_BASKET_ATTRIBUTES . " where customers_id = '" . $_SESSION['customer_id'] . "'");
-      }
-    }
-
-    function add_cart($products_id, $qty = '', $attributes = '') {
-
-      $products_id = xtc_get_uprid($products_id, $attributes);
-
-      if ($this->in_cart($products_id)) {
-        $this->update_quantity($products_id, $qty, $attributes);
-      } else {
-        if ($qty == '') $qty = '1'; // if no quantity is supplied, then add '1' to the customers basket
-
-        $this->contents[] = array($products_id);
-        $this->contents[$products_id] = array('qty' => $qty);
-        // insert into database
-        if ($_SESSION['customer_id']) xtc_db_query("insert into " . TABLE_CUSTOMERS_BASKET . " (customers_id, products_id, customers_basket_quantity, customers_basket_date_added) values ('" . $_SESSION['customer_id'] . "', '" . $products_id . "', '" . $qty . "', '" . date('Ymd') . "')");
-
-        if (is_array($attributes)) {
-          reset($attributes);
-          while (list($option, $value) = each($attributes)) {
-            $this->contents[$products_id]['attributes'][$option] = $value;
-            // insert into database
-            if ($_SESSION['customer_id']) xtc_db_query("insert into " . TABLE_CUSTOMERS_BASKET_ATTRIBUTES . " (customers_id, products_id, products_options_id, products_options_value_id) values ('" . $_SESSION['customer_id'] . "', '" . $products_id . "', '" . $option . "', '" . $value . "')");
-          }
-        }
-        $_SESSION['new_products_id_in_cart'] = $products_id;
-      }
-      $this->cleanup();
-    }
-
-    function update_quantity($products_id, $quantity = '', $attributes = '') {
-
-      if ($quantity == '') return true; // nothing needs to be updated if theres no quantity, so we return true..
-
-      $this->contents[$products_id] = array('qty' => $quantity);
-      // update database
-      if ($_SESSION['customer_id']) xtc_db_query("update " . TABLE_CUSTOMERS_BASKET . " set customers_basket_quantity = '" . $quantity . "' where customers_id = '" . $_SESSION['customer_id'] . "' and products_id = '" . $products_id . "'");
-
-      if (is_array($attributes)) {
-        reset($attributes);
-        while (list($option, $value) = each($attributes)) {
-          $this->contents[$products_id]['attributes'][$option] = $value;
-          // update database
-          if ($_SESSION['customer_id']) xtc_db_query("update " . TABLE_CUSTOMERS_BASKET_ATTRIBUTES . " set products_options_value_id = '" . $value . "' where customers_id = '" . $_SESSION['customer_id'] . "' and products_id = '" . $products_id . "' and products_options_id = '" . $option . "'");
-        }
-      }
-    }
-
-    function cleanup() {
-
-      reset($this->contents);
-      while (list($key,) = each($this->contents)) {
-        if ($this->contents[$key]['qty'] < 1) {
-          unset($this->contents[$key]);
-          // remove from database
-          if ($_SESSION['customer_id']) {
-            xtc_db_query("delete from " . TABLE_CUSTOMERS_BASKET . " where customers_id = '" . $_SESSION['customer_id'] . "' and products_id = '" . $key . "'");
-            xtc_db_query("delete from " . TABLE_CUSTOMERS_BASKET_ATTRIBUTES . " where customers_id = '" . $_SESSION['customer_id'] . "' and products_id = '" . $key . "'");
-          }
-        }
-      }
-    }
-
-    function count_contents() {  // get total number of items in cart 
-        $total_items = 0;
-        if (is_array($this->contents)) {
-            reset($this->contents);
-            while (list($products_id, ) = each($this->contents)) {
-                $total_items += $this->get_quantity($products_id);
-            }
-        }
-        return $total_items;
-    }
-
-    function get_quantity($products_id) {
-      if ($this->contents[$products_id]) {
-        return $this->contents[$products_id]['qty'];
-      } else {
-        return 0;
-      }
-    }
-
-    function in_cart($products_id) {
-      if ($this->contents[$products_id]) {
-        return true;
-      } else {
-        return false;
-      }
-    }
-
-    function remove($products_id) {
-
-      unset($this->contents[$products_id]);
-      // remove from database
-      if ($_SESSION['customer_id']) {
-        xtc_db_query("delete from " . TABLE_CUSTOMERS_BASKET . " where customers_id = '" . $_SESSION['customer_id'] . "' and products_id = '" . $products_id . "'");
-        xtc_db_query("delete from " . TABLE_CUSTOMERS_BASKET_ATTRIBUTES . " where customers_id = '" . $_SESSION['customer_id'] . "' and products_id = '" . $products_id . "'");
-      }
-    }
-
-    function remove_all() {
-      $this->reset();
-    }
-
-    function get_product_id_list() {
-      $product_id_list = '';
-      if (is_array($this->contents)) {
-        reset($this->contents);
-        while (list($products_id, ) = each($this->contents)) {
-          $product_id_list .= ', ' . $products_id;
-        }
-      }
-      return substr($product_id_list, 2);
-    }
-
-    function calculate() {
-      $this->total = 0;
-      $this->weight = 0;
-      if (!is_array($this->contents)) return 0;
-
-      reset($this->contents);
-      while (list($products_id, ) = each($this->contents)) {
-        $qty = $this->contents[$products_id]['qty'];
-
-        // products price
-        $product_query = xtc_db_query("select products_id, products_price, products_tax_class_id, products_weight from " . TABLE_PRODUCTS . " where products_id='" . xtc_get_prid($products_id) . "'");
-        if ($product = xtc_db_fetch_array($product_query)) {
-          $prid = $product['products_id'];
-          $products_tax = xtc_get_tax_rate($product['products_tax_class_id']);
-          $products_price = $product['products_price'];
-          $products_weight = $product['products_weight'];
-
-          $specials_query = xtc_db_query("select specials_new_products_price from " . TABLE_SPECIALS . " where products_id = '" . $prid . "' and status = '1'");
-          if (xtc_db_num_rows ($specials_query)) {
-            $specials = xtc_db_fetch_array($specials_query);
-            $products_price = $specials['specials_new_products_price'];
-          }
-
-          $this->total += xtc_add_tax($products_price, $products_tax) * $qty;
-          $this->weight += ($qty * $products_weight);
-        }
-
-        // attributes price
-        if ($this->contents[$products_id]['attributes']) {
-          reset($this->contents[$products_id]['attributes']);
-          while (list($option, $value) = each($this->contents[$products_id]['attributes'])) {
-            $attribute_price_query = xtc_db_query("select options_values_price, price_prefix from " . TABLE_PRODUCTS_ATTRIBUTES . " where products_id = '" . $prid . "' and options_id = '" . $option . "' and options_values_id = '" . $value . "'");
-            $attribute_price = xtc_db_fetch_array($attribute_price_query);
-            if ($attribute_price['price_prefix'] == '+') {
-              $this->total += $qty * xtc_add_tax($attribute_price['options_values_price'], $products_tax);
-            } else {
-              $this->total -= $qty * xtc_add_tax($attribute_price['options_values_price'], $products_tax);
-            }
-          }
-        }
-      }
-    }
-
-    function attributes_price($products_id) {
-      if ($this->contents[$products_id]['attributes']) {
-        reset($this->contents[$products_id]['attributes']);
-        while (list($option, $value) = each($this->contents[$products_id]['attributes'])) {
-          $attribute_price_query = xtc_db_query("select options_values_price, price_prefix from " . TABLE_PRODUCTS_ATTRIBUTES . " where products_id = '" . $products_id . "' and options_id = '" . $option . "' and options_values_id = '" . $value . "'");
-          $attribute_price = xtc_db_fetch_array($attribute_price_query);
-          if ($attribute_price['price_prefix'] == '+') {
-            $attributes_price += $attribute_price['options_values_price'];
-          } else {
-            $attributes_price -= $attribute_price['options_values_price'];
-          }
-        }
-      }
-
-      return $attributes_price;
-    }
-
-    function get_products() {
-
-      if (!is_array($this->contents)) return 0;
-      $products_array = array();
-      reset($this->contents);
-      while (list($products_id, ) = each($this->contents)) {
-        $products_query = xtc_db_query("select p.products_id, pd.products_name, p.products_model, p.products_price, p.products_weight, p.products_tax_class_id from " . TABLE_PRODUCTS . " p, " . TABLE_PRODUCTS_DESCRIPTION . " pd where p.products_id='" . xtc_get_prid($products_id) . "' and pd.products_id = p.products_id and pd.language_id = '" . $_SESSION['languages_id'] . "'");
-        if ($products = xtc_db_fetch_array($products_query)) {
-          $prid = $products['products_id'];
-          $products_price = $products['products_price'];
-
-          $specials_query = xtc_db_query("select specials_new_products_price from " . TABLE_SPECIALS . " where products_id = '" . $prid . "' and status = '1'");
-          if (xtc_db_num_rows($specials_query)) {
-            $specials = xtc_db_fetch_array($specials_query);
-            $products_price = $specials['specials_new_products_price'];
-          }
-
-          $products_array[] = array('id' => $products_id,
-                                    'name' => $products['products_name'],
-                                    'model' => $products['products_model'],
-                                    'price' => $products_price,
-                                    'quantity' => $this->contents[$products_id]['qty'],
-                                    'weight' => $products['products_weight'],
-                                    'final_price' => ($products_price + $this->attributes_price($products_id)),
-                                    'tax_class_id' => $products['products_tax_class_id'],
-                                    'attributes' => $this->contents[$products_id]['attributes']);
-        }
-      }
-      return $products_array;
-    }
-
-    function show_total() {
-      $this->calculate();
-
-      return $this->total;
-    }
-
-    function show_weight() {
-      $this->calculate();
-
-      return $this->weight;
-    }
-
-    function unserialize($broken) {
-      for(reset($broken);$kv=each($broken);) {
-        $key=$kv['key'];
-        if (gettype($this->$key)!="user function")
-        $this->$key=$kv['value'];
-      }
-    }
-  }
+<?php
+/* --------------------------------------------------------------
+   $Id: shopping_cart.php 950 2005-05-14 16:45:21Z mz $   
+
+   XT-Commerce - community made shopping
+   http://www.xt-commerce.com
+
+   Copyright (c) 2003 XT-Commerce
+   --------------------------------------------------------------
+   based on: 
+   (c) 2000-2001 The Exchange Project  (earlier name of osCommerce)
+   (c) 2002-2003 osCommerce(shopping_cart.php,v 1.7 2002/05/16); www.oscommerce.com 
+   (c) 2003	 nextcommerce (shopping_cart.php,v 1.6 2003/08/18); www.nextcommerce.org
+
+   Released under the GNU General Public License 
+   --------------------------------------------------------------*/
+defined( '_VALID_XTC' ) or die( 'Direct Access to this location is not allowed.' );
+  class shoppingCart {
+    var $contents, $total, $weight;
+
+    function shoppingCart() {
+      $this->reset();
+    }
+
+    function restore_contents() {
+
+      if (!$_SESSION['customer_id']) return 0;
+
+      // insert current cart contents in database
+      if ($this->contents) {
+        reset($this->contents);
+        while (list($products_id, ) = each($this->contents)) {
+          $qty = $this->contents[$products_id]['qty'];
+          $product_query = xtc_db_query("select products_id from " . TABLE_CUSTOMERS_BASKET . " where customers_id = '" . $_SESSION['customer_id'] . "' and products_id = '" . $products_id . "'");
+          if (!xtc_db_num_rows($product_query)) {
+            xtc_db_query("insert into " . TABLE_CUSTOMERS_BASKET . " (customers_id, products_id, customers_basket_quantity, customers_basket_date_added) values ('" . $_SESSION['customer_id'] . "', '" . $products_id . "', '" . $qty . "', '" . date('Ymd') . "')");
+            if ($this->contents[$products_id]['attributes']) {
+              reset($this->contents[$products_id]['attributes']);
+              while (list($option, $value) = each($this->contents[$products_id]['attributes'])) {
+                xtc_db_query("insert into " . TABLE_CUSTOMERS_BASKET_ATTRIBUTES . " (customers_id, products_id, products_options_id, products_options_value_id) values ('" . $_SESSION['customer_id'] . "', '" . $products_id . "', '" . $option . "', '" . $value . "')");
+              }
+            }
+          } else {
+            xtc_db_query("update " . TABLE_CUSTOMERS_BASKET . " set customers_basket_quantity = '" . $qty . "' where customers_id = '" . $_SESSION['customer_id'] . "' and products_id = '" . $products_id . "'");
+          }
+        }
+      }
+
+      // reset per-session cart contents, but not the database contents
+      $this->reset(FALSE);
+
+      $products_query = xtc_db_query("select products_id, customers_basket_quantity from " . TABLE_CUSTOMERS_BASKET . " where customers_id = '" . $_SESSION['customer_id'] . "'");
+      while ($products = xtc_db_fetch_array($products_query)) {
+        $this->contents[$products['products_id']] = array('qty' => $products['customers_basket_quantity']);
+        // attributes
+        $attributes_query = xtc_db_query("select products_options_id, products_options_value_id from " . TABLE_CUSTOMERS_BASKET_ATTRIBUTES . " where customers_id = '" . $_SESSION['customer_id'] . "' and products_id = '" . $products['products_id'] . "'");
+        while ($attributes = xtc_db_fetch_array($attributes_query)) {
+          $this->contents[$products['products_id']]['attributes'][$attributes['products_options_id']] = $attributes['products_options_value_id'];
+        }
+      }
+
+      $this->cleanup();
+    }
+
+    function reset($reset_database = FALSE) {
+
+      $this->contents = array();
+      $this->total = 0;
+
+      if ($_SESSION['customer_id'] && $reset_database) {
+        xtc_db_query("delete from " . TABLE_CUSTOMERS_BASKET . " where customers_id = '" . $_SESSION['customer_id'] . "'");
+        xtc_db_query("delete from " . TABLE_CUSTOMERS_BASKET_ATTRIBUTES . " where customers_id = '" . $_SESSION['customer_id'] . "'");
+      }
+    }
+
+    function add_cart($products_id, $qty = '', $attributes = '') {
+
+      $products_id = xtc_get_uprid($products_id, $attributes);
+
+      if ($this->in_cart($products_id)) {
+        $this->update_quantity($products_id, $qty, $attributes);
+      } else {
+        if ($qty == '') $qty = '1'; // if no quantity is supplied, then add '1' to the customers basket
+
+        $this->contents[] = array($products_id);
+        $this->contents[$products_id] = array('qty' => $qty);
+        // insert into database
+        if ($_SESSION['customer_id']) xtc_db_query("insert into " . TABLE_CUSTOMERS_BASKET . " (customers_id, products_id, customers_basket_quantity, customers_basket_date_added) values ('" . $_SESSION['customer_id'] . "', '" . $products_id . "', '" . $qty . "', '" . date('Ymd') . "')");
+
+        if (is_array($attributes)) {
+          reset($attributes);
+          while (list($option, $value) = each($attributes)) {
+            $this->contents[$products_id]['attributes'][$option] = $value;
+            // insert into database
+            if ($_SESSION['customer_id']) xtc_db_query("insert into " . TABLE_CUSTOMERS_BASKET_ATTRIBUTES . " (customers_id, products_id, products_options_id, products_options_value_id) values ('" . $_SESSION['customer_id'] . "', '" . $products_id . "', '" . $option . "', '" . $value . "')");
+          }
+        }
+        $_SESSION['new_products_id_in_cart'] = $products_id;
+      }
+      $this->cleanup();
+    }
+
+    function update_quantity($products_id, $quantity = '', $attributes = '') {
+
+      if ($quantity == '') return true; // nothing needs to be updated if theres no quantity, so we return true..
+
+      $this->contents[$products_id] = array('qty' => $quantity);
+      // update database
+      if ($_SESSION['customer_id']) xtc_db_query("update " . TABLE_CUSTOMERS_BASKET . " set customers_basket_quantity = '" . $quantity . "' where customers_id = '" . $_SESSION['customer_id'] . "' and products_id = '" . $products_id . "'");
+
+      if (is_array($attributes)) {
+        reset($attributes);
+        while (list($option, $value) = each($attributes)) {
+          $this->contents[$products_id]['attributes'][$option] = $value;
+          // update database
+          if ($_SESSION['customer_id']) xtc_db_query("update " . TABLE_CUSTOMERS_BASKET_ATTRIBUTES . " set products_options_value_id = '" . $value . "' where customers_id = '" . $_SESSION['customer_id'] . "' and products_id = '" . $products_id . "' and products_options_id = '" . $option . "'");
+        }
+      }
+    }
+
+    function cleanup() {
+
+      reset($this->contents);
+      while (list($key,) = each($this->contents)) {
+        if ($this->contents[$key]['qty'] < 1) {
+          unset($this->contents[$key]);
+          // remove from database
+          if ($_SESSION['customer_id']) {
+            xtc_db_query("delete from " . TABLE_CUSTOMERS_BASKET . " where customers_id = '" . $_SESSION['customer_id'] . "' and products_id = '" . $key . "'");
+            xtc_db_query("delete from " . TABLE_CUSTOMERS_BASKET_ATTRIBUTES . " where customers_id = '" . $_SESSION['customer_id'] . "' and products_id = '" . $key . "'");
+          }
+        }
+      }
+    }
+
+    function count_contents() {  // get total number of items in cart 
+        $total_items = 0;
+        if (is_array($this->contents)) {
+            reset($this->contents);
+            while (list($products_id, ) = each($this->contents)) {
+                $total_items += $this->get_quantity($products_id);
+            }
+        }
+        return $total_items;
+    }
+
+    function get_quantity($products_id) {
+      if ($this->contents[$products_id]) {
+        return $this->contents[$products_id]['qty'];
+      } else {
+        return 0;
+      }
+    }
+
+    function in_cart($products_id) {
+      if ($this->contents[$products_id]) {
+        return true;
+      } else {
+        return false;
+      }
+    }
+
+    function remove($products_id) {
+
+      unset($this->contents[$products_id]);
+      // remove from database
+      if ($_SESSION['customer_id']) {
+        xtc_db_query("delete from " . TABLE_CUSTOMERS_BASKET . " where customers_id = '" . $_SESSION['customer_id'] . "' and products_id = '" . $products_id . "'");
+        xtc_db_query("delete from " . TABLE_CUSTOMERS_BASKET_ATTRIBUTES . " where customers_id = '" . $_SESSION['customer_id'] . "' and products_id = '" . $products_id . "'");
+      }
+    }
+
+    function remove_all() {
+      $this->reset();
+    }
+
+    function get_product_id_list() {
+      $product_id_list = '';
+      if (is_array($this->contents)) {
+        reset($this->contents);
+        while (list($products_id, ) = each($this->contents)) {
+          $product_id_list .= ', ' . $products_id;
+        }
+      }
+      return substr($product_id_list, 2);
+    }
+
+    function calculate() {
+      $this->total = 0;
+      $this->weight = 0;
+      if (!is_array($this->contents)) return 0;
+
+      reset($this->contents);
+      while (list($products_id, ) = each($this->contents)) {
+        $qty = $this->contents[$products_id]['qty'];
+
+        // products price
+        $product_query = xtc_db_query("select products_id, products_price, products_tax_class_id, products_weight from " . TABLE_PRODUCTS . " where products_id='" . xtc_get_prid($products_id) . "'");
+        if ($product = xtc_db_fetch_array($product_query)) {
+          $prid = $product['products_id'];
+          $products_tax = xtc_get_tax_rate($product['products_tax_class_id']);
+          $products_price = $product['products_price'];
+          $products_weight = $product['products_weight'];
+
+          $specials_query = xtc_db_query("select specials_new_products_price from " . TABLE_SPECIALS . " where products_id = '" . $prid . "' and status = '1'");
+          if (xtc_db_num_rows ($specials_query)) {
+            $specials = xtc_db_fetch_array($specials_query);
+            $products_price = $specials['specials_new_products_price'];
+          }
+
+          $this->total += xtc_add_tax($products_price, $products_tax) * $qty;
+          $this->weight += ($qty * $products_weight);
+        }
+
+        // attributes price
+        if ($this->contents[$products_id]['attributes']) {
+          reset($this->contents[$products_id]['attributes']);
+          while (list($option, $value) = each($this->contents[$products_id]['attributes'])) {
+            $attribute_price_query = xtc_db_query("select options_values_price, price_prefix from " . TABLE_PRODUCTS_ATTRIBUTES . " where products_id = '" . $prid . "' and options_id = '" . $option . "' and options_values_id = '" . $value . "'");
+            $attribute_price = xtc_db_fetch_array($attribute_price_query);
+            if ($attribute_price['price_prefix'] == '+') {
+              $this->total += $qty * xtc_add_tax($attribute_price['options_values_price'], $products_tax);
+            } else {
+              $this->total -= $qty * xtc_add_tax($attribute_price['options_values_price'], $products_tax);
+            }
+          }
+        }
+      }
+    }
+
+    function attributes_price($products_id) {
+      if ($this->contents[$products_id]['attributes']) {
+        reset($this->contents[$products_id]['attributes']);
+        while (list($option, $value) = each($this->contents[$products_id]['attributes'])) {
+          $attribute_price_query = xtc_db_query("select options_values_price, price_prefix from " . TABLE_PRODUCTS_ATTRIBUTES . " where products_id = '" . $products_id . "' and options_id = '" . $option . "' and options_values_id = '" . $value . "'");
+          $attribute_price = xtc_db_fetch_array($attribute_price_query);
+          if ($attribute_price['price_prefix'] == '+') {
+            $attributes_price += $attribute_price['options_values_price'];
+          } else {
+            $attributes_price -= $attribute_price['options_values_price'];
+          }
+        }
+      }
+
+      return $attributes_price;
+    }
+
+    function get_products() {
+
+      if (!is_array($this->contents)) return 0;
+      $products_array = array();
+      reset($this->contents);
+      while (list($products_id, ) = each($this->contents)) {
+          $products_query = xtc_db_query("select p.products_id, pd.products_name, p.products_model, p.products_price, p.products_weight, p.products_width, p.products_height, p.products_length, p.products_tax_class_id from " . TABLE_PRODUCTS . " p, " . TABLE_PRODUCTS_DESCRIPTION . " pd where p.products_id='" . xtc_get_prid($products_id) . "' and pd.products_id = p.products_id and pd.language_id = '" . $_SESSION['languages_id'] . "'");        if ($products = xtc_db_fetch_array($products_query)) {
+          $prid = $products['products_id'];
+          $products_price = $products['products_price'];
+
+          $specials_query = xtc_db_query("select specials_new_products_price from " . TABLE_SPECIALS . " where products_id = '" . $prid . "' and status = '1'");
+          if (xtc_db_num_rows($specials_query)) {
+            $specials = xtc_db_fetch_array($specials_query);
+            $products_price = $specials['specials_new_products_price'];
+          }
+
+          $products_array[] = array('id' => $products_id,
+                                    'name' => $products['products_name'],
+                                    'model' => $products['products_model'],
+                                    'price' => $products_price,
+                                    'quantity' => $this->contents[$products_id]['qty'],
+                                    'weight' => $products['products_weight'],
+                                    'width' => $products['products_width'],
+                                    'height' => $products['products_height'],
+                                    'length' => $products['products_length'],
+                                    'final_price' => ($products_price + $this->attributes_price($products_id)),
+                                    'tax_class_id' => $products['products_tax_class_id'],
+                                    'attributes' => $this->contents[$products_id]['attributes']);
+        }
+      }
+      return $products_array;
+    }
+
+    function show_total() {
+      $this->calculate();
+
+      return $this->total;
+    }
+
+    function show_weight() {
+      $this->calculate();
+
+      return $this->weight;
+    }
+
+    function unserialize($broken) {
+      for(reset($broken);$kv=each($broken);) {
+        $key=$kv['key'];
+        if (gettype($this->$key)!="user function")
+        $this->$key=$kv['value'];
+      }
+    }
+  }
 ?>
\ No newline at end of file
diff --git a/admin/includes/modules/new_product.php b/admin/includes/modules/new_product.php
index fd3c90a..6090978 100644
--- a/admin/includes/modules/new_product.php
+++ b/admin/includes/modules/new_product.php
@@ -1,328 +1,340 @@
-<?php
-
-/* --------------------------------------------------------------
-   $Id: new_product.php 897 2005-04-28 21:36:55Z mz $
-
-   XT-Commerce - community made shopping
-   http://www.xt-commerce.com
-
-   Copyright (c) 2003 XT-Commerce
-   --------------------------------------------------------------
-   based on:
-   (c) 2000-2001 The Exchange Project  (earlier name of osCommerce)
-   (c) 2002-2003 osCommerce(categories.php,v 1.140 2003/03/24); www.oscommerce.com
-   (c) 2003  nextcommerce (categories.php,v 1.37 2003/08/18); www.nextcommerce.org
-
-   Released under the GNU General Public License
-   --------------------------------------------------------------
-   Third Party contribution:
-   Enable_Disable_Categories 1.3               Autor: Mikel Williams | mikel@ladykatcostumes.com
-   New Attribute Manager v4b                   Autor: Mike G | mp3man@internetwork.net | http://downloads.ephing.com
-   Category Descriptions (Version: 1.5 MS2)    Original Author:   Brian Lowe <blowe@wpcusrgrp.org> | Editor: Lord Illicious <shaolin-venoms@illicious.net>
-   Customers Status v3.x  (c) 2002-2003 Copyright Elari elari@free.fr | www.unlockgsm.com/dload-osc/ | CVS : http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/elari/?sortby=date#dirlist
-
-   Released under the GNU General Public License
-   --------------------------------------------------------------*/
-
-if (($_GET['pID']) && (!$_POST)) {
-	$product_query = xtc_db_query("select *, date_format(p.products_date_available, '%Y-%m-%d') as products_date_available 
-	                               from ".TABLE_PRODUCTS." p, ".TABLE_PRODUCTS_DESCRIPTION." pd
-                                  where p.products_id = '".(int) $_GET['pID']."'
-                                  and p.products_id = pd.products_id
-                                  and pd.language_id = '".$_SESSION['languages_id']."'");
-
-	$product = xtc_db_fetch_array($product_query);
-	$pInfo = new objectInfo($product);
-
-}
-elseif ($_POST) {
-	$pInfo = new objectInfo($_POST);
-	$products_name = $_POST['products_name'];
-	$products_description = $_POST['products_description'];
-	$products_short_description = $_POST['products_short_description'];
-	$products_keywords = $_POST['products_keywords'];
-	$products_meta_title = $_POST['products_meta_title'];
-	$products_meta_description = $_POST['products_meta_description'];
-	$products_meta_keywords = $_POST['products_meta_keywords'];
-	$products_url = $_POST['products_url'];
-	$pInfo->products_startpage = $_POST['products_startpage'];
-   $products_startpage_sort = $_POST['products_startpage_sort'];
-} else {
-	$pInfo = new objectInfo(array ());
-}
-
-$manufacturers_array = array (array ('id' => '', 'text' => TEXT_NONE));
-$manufacturers_query = xtc_db_query("select manufacturers_id, manufacturers_name from ".TABLE_MANUFACTURERS." order by manufacturers_name");
-while ($manufacturers = xtc_db_fetch_array($manufacturers_query)) {
-	$manufacturers_array[] = array ('id' => $manufacturers['manufacturers_id'], 'text' => $manufacturers['manufacturers_name']);
-}
-
-$vpe_array = array (array ('id' => '', 'text' => TEXT_NONE));
-$vpe_query = xtc_db_query("select products_vpe_id, products_vpe_name from ".TABLE_PRODUCTS_VPE." WHERE language_id='".$_SESSION['languages_id']."' order by products_vpe_name");
-while ($vpe = xtc_db_fetch_array($vpe_query)) {
-	$vpe_array[] = array ('id' => $vpe['products_vpe_id'], 'text' => $vpe['products_vpe_name']);
-}
-
-$tax_class_array = array (array ('id' => '0', 'text' => TEXT_NONE));
-$tax_class_query = xtc_db_query("select tax_class_id, tax_class_title from ".TABLE_TAX_CLASS." order by tax_class_title");
-while ($tax_class = xtc_db_fetch_array($tax_class_query)) {
-	$tax_class_array[] = array ('id' => $tax_class['tax_class_id'], 'text' => $tax_class['tax_class_title']);
-}
-$shipping_statuses = array ();
-$shipping_statuses = xtc_get_shipping_status();
-$languages = xtc_get_languages();
-
-switch ($pInfo->products_status) {
-	case '0' :
-		$status = false;
-		$out_status = true;
-		break;
-	case '1' :
-	default :
-		$status = true;
-		$out_status = false;
-}
-
-if ($pInfo->products_startpage == '1') { $startpage_checked = true; } else { $startpage_checked = false; }
-
-?>
-<link rel="stylesheet" type="text/css" href="includes/javascript/spiffyCal/spiffyCal_v2_1.css">
-<script type="text/javascript" src="includes/javascript/spiffyCal/spiffyCal_v2_1.js"></script>
-<script type="text/javascript">
-  var dateAvailable = new ctlSpiffyCalendarBox("dateAvailable", "new_product", "products_date_available","btnDate1","<?php echo $pInfo->products_date_available; ?>",scBTNMODE_CUSTOMBLUE);
-</script>
-
-<tr><td>
-<?php $form_action = ($_GET['pID']) ? 'update_product' : 'insert_product'; ?>
-<?php $fsk18_array=array(array('id'=>0,'text'=>NO),array('id'=>1,'text'=>YES)); ?>
-<?php echo xtc_draw_form('new_product', FILENAME_CATEGORIES, 'cPath=' . $_GET['cPath'] . '&pID=' . $_GET['pID'] . '&action='.$form_action, 'post', 'enctype="multipart/form-data"'); ?>
-<span class="pageHeading"><?php echo sprintf(TEXT_NEW_PRODUCT, xtc_output_generated_category_path($current_category_id)); ?></span><br />
-<table width="100%"  border="0">
-  <tr>
-    <td><span class="main"><?php echo TEXT_PRODUCTS_STATUS; ?> <?php echo xtc_draw_separator('pixel_trans.gif', '24', '15') . '&nbsp;' . xtc_draw_radio_field('products_status', '1', $status) . '&nbsp;' . TEXT_PRODUCT_AVAILABLE . '&nbsp;' . xtc_draw_radio_field('products_status', '0', $out_status) . '&nbsp;' . TEXT_PRODUCT_NOT_AVAILABLE; ?><br />
-    </span>
-      <table width="100%" border="0">
-        <tr>
-          <td class="main" width="127"><?php echo TEXT_PRODUCTS_DATE_AVAILABLE; ?><br />
-              <small>(YYYY-MM-DD)</small></td>
-          <td class="main"><?php echo xtc_draw_separator('pixel_trans.gif', '24', '15') . '&nbsp;'; ?>
-              <script type="text/javascript">dateAvailable.writeControl(); dateAvailable.dateFormat="yyyy-MM-dd";</script></td>
-        </tr>
-      </table>
-      <span class="main"><br /></span>
-    </td><td>
-    <table bgcolor="f3f3f3" style="border: 1px solid; border-color: #cccccc;" "width="100%"  border="0">
-    <tr>
-        <td><span class="main"><?php echo TEXT_PRODUCTS_STARTPAGE; ?> <?php echo TEXT_PRODUCTS_STARTPAGE_YES . xtc_draw_radio_field('products_startpage', '1', $startpage_checked) . '&nbsp;' . TEXT_PRODUCTS_STARTPAGE_NO . xtc_draw_radio_field('products_startpage', '0', !$startpage_checked) ?></span></td>
-        <td><span class="main"><?php echo TEXT_PRODUCTS_STARTPAGE_SORT; ?>&nbsp;<?php echo  xtc_draw_input_field('products_startpage_sort', $pInfo->products_startpage_sort ,'size=3'); ?></span></td>
-    </tr>        
-    <tr>
-        <td><span class="main"><?php echo TEXT_PRODUCTS_SORT; ?>&nbsp;<?php echo  xtc_draw_input_field('products_sort', $pInfo->products_sort,'size=3'); ?></span></td>
-        <td><span class="main"><?php echo TEXT_PRODUCTS_QUANTITY; ?>&nbsp;<?php echo xtc_draw_input_field('products_quantity', $pInfo->products_quantity,'size=5'); ?></span></td>
-      </tr>
-              <tr>
-        <td><span class="main"><?php echo TEXT_PRODUCTS_MODEL; ?></span></td>
-        <td><span class="main"><?php echo  xtc_draw_input_field('products_model', $pInfo->products_model); ?></span></td>
-      </tr>
-                    <tr>
-        <td><span class="main"><?php echo TEXT_PRODUCTS_EAN; ?></span></td>
-        <td><span class="main"><?php echo  xtc_draw_input_field('products_ean', $pInfo->products_ean); ?></span></td>
-      </tr>
-      <tr>
-        <td><span class="main"><?php echo TEXT_PRODUCTS_MANUFACTURER; ?></span></td>
-        <td><span class="main"><?php echo xtc_draw_pull_down_menu('manufacturers_id', $manufacturers_array, $pInfo->manufacturers_id); ?></span></td>
-      </tr>
-      <tr>
-        <td><span class="main"><?php echo TEXT_PRODUCTS_VPE_VISIBLE.xtc_draw_selection_field('products_vpe_status', 'checkbox', '1',$pInfo->products_vpe_status==1 ? true : false); ?>
-        <?php echo TEXT_PRODUCTS_VPE_VALUE.xtc_draw_input_field('products_vpe_value', $pInfo->products_vpe_value,'size=4'); ?></span></td>
-        <td><span class="main"><?php echo TEXT_PRODUCTS_VPE. xtc_draw_pull_down_menu('products_vpe', $vpe_array, $pInfo->products_vpe='' ?  DEFAULT_PRODUCTS_VPE_ID : $pInfo->products_vpe); ?></span></td>
-      </tr>
-      <tr>
-        <td><span class="main"><?php echo TEXT_FSK18; ?>&nbsp;<?php echo xtc_draw_pull_down_menu('fsk18', $fsk18_array, $pInfo->products_fsk18); ?></span></td>
-        <td><span class="main"><?php echo TEXT_PRODUCTS_WEIGHT; ?><?php echo xtc_draw_input_field('products_weight', $pInfo->products_weight,'size=4'); ?><?php echo TEXT_PRODUCTS_WEIGHT_INFO; ?></span></td>
-      </tr>
-      <tr>
-<?php if (ACTIVATE_SHIPPING_STATUS=='true') { ?>
-        <td><span class="main"><?php echo BOX_SHIPPING_STATUS.':'; ?></span></td>
-        <td><span class="main"><?php echo xtc_draw_pull_down_menu('shipping_status', $shipping_statuses, $pInfo->products_shippingtime); ?></span></td>
-      </tr>
-<?php } ?>
-      <tr>
-          <?php
-
-$files = array ();
-if ($dir = opendir(DIR_FS_CATALOG.'templates/'.CURRENT_TEMPLATE.'/module/product_info/')) {
-	while (($file = readdir($dir)) !== false) {
-		if (is_file(DIR_FS_CATALOG.'templates/'.CURRENT_TEMPLATE.'/module/product_info/'.$file) and ($file != "index.html")) {
-			$files[] = array ('id' => $file, 'text' => $file);
-		} //if
-	} // while
-	closedir($dir);
-}
-$default_array = array ();
-// set default value in dropdown!
-if ($content['content_file'] == '') {
-	$default_array[] = array ('id' => 'default', 'text' => TEXT_SELECT);
-	$default_value = $pInfo->product_template;
-	$files = array_merge($default_array, $files);
-} else {
-	$default_array[] = array ('id' => 'default', 'text' => TEXT_NO_FILE);
-	$default_value = $pInfo->product_template;
-	$files = array_merge($default_array, $files);
-}
-echo '<td class="main">'.TEXT_CHOOSE_INFO_TEMPLATE.':</td>';
-echo '<td><span class="main">'.xtc_draw_pull_down_menu('info_template', $files, $default_value);
-?>
-        </span></td>
-      </tr>
-      <tr>
-
-
-          <?php
-
-$files = array ();
-if ($dir = opendir(DIR_FS_CATALOG.'templates/'.CURRENT_TEMPLATE.'/module/product_options/')) {
-	while (($file = readdir($dir)) !== false) {
-		if (is_file(DIR_FS_CATALOG.'templates/'.CURRENT_TEMPLATE.'/module/product_options/'.$file) and ($file != "index.html")) {
-			$files[] = array ('id' => $file, 'text' => $file);
-		} //if
-	} // while
-	closedir($dir);
-}
-// set default value in dropdown!
-$default_array = array ();
-if ($content['content_file'] == '') {
-	$default_array[] = array ('id' => 'default', 'text' => TEXT_SELECT);
-	$default_value = $pInfo->options_template;
-	$files = array_merge($default_array, $files);
-} else {
-	$default_array[] = array ('id' => 'default', 'text' => TEXT_NO_FILE);
-	$default_value = $pInfo->options_template;
-	$files = array_merge($default_array, $files);
-}
-echo '<td class="main">'.TEXT_CHOOSE_OPTIONS_TEMPLATE.':'.'</td>';
-echo '<td><span class="main">'.xtc_draw_pull_down_menu('options_template', $files, $default_value);
-?>
-        </span></td>
-      </tr>
-    </table></td>
-  </tr>
-</table>
-  <br /><br />
-  <?php for ($i = 0, $n = sizeof($languages); $i < $n; $i++) { ?>
-  <table width="100%" border="0">
-  <tr>
-  <td bgcolor="000000" height="10"></td>
-  </tr>
-  <tr>
-    <td bgcolor="#FFCC33" valign="top" class="main"><?php echo xtc_image(DIR_WS_LANGUAGES . $languages[$i]['directory'] .'/'. $languages[$i]['image'], $languages[$i]['name']); ?>&nbsp;<?php echo TEXT_PRODUCTS_NAME; ?><?php echo xtc_draw_input_field('products_name[' . $languages[$i]['id'] . ']', (($products_name[$languages[$i]['id']]) ? stripslashes($products_name[$languages[$i]['id']]) : xtc_get_products_name($pInfo->products_id, $languages[$i]['id'])),'size=60'); ?></td>
-  </tr>
-  <tr>
-    <td class="main"><?php echo TEXT_PRODUCTS_URL . '&nbsp;<small>' . TEXT_PRODUCTS_URL_WITHOUT_HTTP . '</small>'; ?><?php echo xtc_draw_input_field('products_url[' . $languages[$i]['id'] . ']', (($products_url[$languages[$i]['id']]) ? stripslashes($products_url[$languages[$i]['id']]) : xtc_get_products_url($pInfo->products_id, $languages[$i]['id'])),'size=60'); ?></td>
-  </tr>
-</table>
-
-<!-- input boxes desc, meta etc -->
-<table width="100%" border="0">
-  <tr>
-    <td class="main">
-        <STRONG><?php echo TEXT_PRODUCTS_DESCRIPTION; ?></STRONG><br />
-        <?php echo xtc_draw_textarea_field('products_description_' . $languages[$i]['id'], 'soft', '103', '30', (($products_description[$languages[$i]['id']]) ? stripslashes($products_description[$languages[$i]['id']]) : xtc_get_products_description($pInfo->products_id, $languages[$i]['id']))); ?>
-    </td>
-  </tr>
-  <tr>
-    <td class="main" valign="top">
-    
-    <table>
-    <tr>
-     <td width="60%" valign="top" class="main">
-        <STRONG><?php echo TEXT_PRODUCTS_SHORT_DESCRIPTION; ?></STRONG><br />
-        <?php echo xtc_draw_textarea_field('products_short_description_' . $languages[$i]['id'], 'soft', '103', '20', (($products_short_description[$languages[$i]['id']]) ? stripslashes($products_short_description[$languages[$i]['id']]) : xtc_get_products_short_description($pInfo->products_id, $languages[$i]['id']))); ?>
-     </td>
-     <td class="main" valign="top" style="padding: 15px;">
-        <?php echo TEXT_PRODUCTS_KEYWORDS; ?><br />
-        <?php echo xtc_draw_input_field('products_keywords[' . $languages[$i]['id'] . ']',(($products_keywords[$languages[$i]['id']]) ? stripslashes($products_keywords[$languages[$i]['id']]) : xtc_get_products_keywords($pInfo->products_id, $languages[$i]['id'])), 'size=25 maxlenght=255'); ?><br />     
-        <?php echo TEXT_META_TITLE; ?><br />
-        <?php echo xtc_draw_input_field('products_meta_title[' . $languages[$i]['id'] . ']',(($products_meta_title[$languages[$i]['id']]) ? stripslashes($products_meta_title[$languages[$i]['id']]) : xtc_get_products_meta_title($pInfo->products_id, $languages[$i]['id'])), 'size=25 maxlenght=50'); ?><br />
-        <?php echo TEXT_META_DESCRIPTION; ?><br />
-        <?php echo xtc_draw_input_field('products_meta_description[' . $languages[$i]['id'] . ']',(($products_meta_description[$languages[$i]['id']]) ? stripslashes($products_meta_description[$languages[$i]['id']]) : xtc_get_products_meta_description($pInfo->products_id, $languages[$i]['id'])), 'size=25 maxlenght=50'); ?><br />
-        <?php echo TEXT_META_KEYWORDS; ?><br />
-        <?php echo xtc_draw_input_field('products_meta_keywords[' . $languages[$i]['id'] . ']', (($products_meta_keywords[$languages[$i]['id']]) ? stripslashes($products_meta_keywords[$languages[$i]['id']]) : xtc_get_products_meta_keywords($pInfo->products_id, $languages[$i]['id'])), 'size=25 maxlenght=50'); ?> 
-     </td>
-    </tr>
-    </table>
-   
-   </td>
-  </tr>
-</table>
-
-<?php } ?>
-<table width="100%"><tr><td style="border-bottom: thin dashed Gray;">&nbsp;</td></tr></table>
-<table width="100%" border="0" cellpadding="0" cellspacing="0">
-<tr><td><span class="main" style="padding-left: 10px;"><?php echo HEADING_PRODUCT_IMAGES; ?></span></td></tr>
-<tr><td><br />
-<table width="100%" border="0" bgcolor="f3f3f3" style="border: 1px solid; border-color: #cccccc;">
-
-<?php
-
-include (DIR_WS_MODULES.'products_images.php');
-?>
-    <tr><td colspan="4"><?php echo xtc_draw_separator('pixel_trans.gif', '1', '10'); ?></td></tr>
-<?php
-
-if (GROUP_CHECK == 'true') {
-	$customers_statuses_array = xtc_get_customers_statuses();
-	$customers_statuses_array = array_merge(array (array ('id' => 'all', 'text' => TXT_ALL)), $customers_statuses_array);
-?>
-<tr>
-<td style="border-top: 1px solid; border-color: #ff0000;" valign="top" class="main" ><?php echo ENTRY_CUSTOMERS_STATUS; ?></td>
-<td style="border-top: 1px solid; border-left: 1px solid; border-color: #ff0000;"  bgcolor="#FFCC33" class="main">
-<?php
-
-	for ($i = 0; $n = sizeof($customers_statuses_array), $i < $n; $i ++) {
-		$code = '$id=$pInfo->group_permission_'.$customers_statuses_array[$i]['id'].';';
-		eval ($code);
-		
-		if ($id==1) {
-
-			$checked = 'checked ';
-			
-		} else {
-			$checked = '';
-		}
-		echo '<input type="checkbox" name="groups[]" value="'.$customers_statuses_array[$i]['id'].'"'.$checked.'> '.$customers_statuses_array[$i]['text'].'<br />';
-	}
-
-?>
-</td>
-</tr>
-<?php
-
-}
-?>
-</table>
-</td></tr>
-
-<tr><td>
-<table width="100%" border="0">
-        <tr>
-          <td colspan="4"><?php include(DIR_WS_MODULES.'group_prices.php'); ?></td>
-        </tr>
-        <tr>
-          <td colspan="4"><?php echo xtc_draw_separator('pixel_trans.gif', '1', '10'); ?></td>
-        </tr>
-</table>
-</td></tr>
-
-    <tr>
-     <td class="main" align="right">
-      	<?php
-
-echo xtc_draw_hidden_field('products_date_added', (($pInfo->products_date_added) ? $pInfo->products_date_added : date('Y-m-d')));
-echo xtc_draw_hidden_field('products_id', $pInfo->products_id);
-?>
-      	<input type="submit" class="button" value="<?php echo BUTTON_SAVE; ?>" onClick="return confirm('<?php echo SAVE_ENTRY; ?>')">
-      	&nbsp;&nbsp;
-      	<?php echo '<a class="button" href="' . xtc_href_link(FILENAME_CATEGORIES, 'cPath=' . $cPath . '&pID=' . $_GET['pID']) . '">' . BUTTON_CANCEL . '</a>'; ?>
-  	 </td>
+<?php
+
+/* --------------------------------------------------------------
+   $Id: new_product.php 897 2005-04-28 21:36:55Z mz $
+
+   XT-Commerce - community made shopping
+   http://www.xt-commerce.com
+
+   Copyright (c) 2003 XT-Commerce
+   --------------------------------------------------------------
+   based on:
+   (c) 2000-2001 The Exchange Project  (earlier name of osCommerce)
+   (c) 2002-2003 osCommerce(categories.php,v 1.140 2003/03/24); www.oscommerce.com
+   (c) 2003  nextcommerce (categories.php,v 1.37 2003/08/18); www.nextcommerce.org
+
+   Released under the GNU General Public License
+   --------------------------------------------------------------
+   Third Party contribution:
+   Enable_Disable_Categories 1.3               Autor: Mikel Williams | mikel@ladykatcostumes.com
+   New Attribute Manager v4b                   Autor: Mike G | mp3man@internetwork.net | http://downloads.ephing.com
+   Category Descriptions (Version: 1.5 MS2)    Original Author:   Brian Lowe <blowe@wpcusrgrp.org> | Editor: Lord Illicious <shaolin-venoms@illicious.net>
+   Customers Status v3.x  (c) 2002-2003 Copyright Elari elari@free.fr | www.unlockgsm.com/dload-osc/ | CVS : http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/elari/?sortby=date#dirlist
+
+   Released under the GNU General Public License
+   --------------------------------------------------------------*/
+
+if (($_GET['pID']) && (!$_POST)) {
+	$product_query = xtc_db_query("select *, date_format(p.products_date_available, '%Y-%m-%d') as products_date_available 
+	                               from ".TABLE_PRODUCTS." p, ".TABLE_PRODUCTS_DESCRIPTION." pd
+                                  where p.products_id = '".(int) $_GET['pID']."'
+                                  and p.products_id = pd.products_id
+                                  and pd.language_id = '".$_SESSION['languages_id']."'");
+
+	$product = xtc_db_fetch_array($product_query);
+	$pInfo = new objectInfo($product);
+
+}
+elseif ($_POST) {
+	$pInfo = new objectInfo($_POST);
+	$products_name = $_POST['products_name'];
+	$products_description = $_POST['products_description'];
+	$products_short_description = $_POST['products_short_description'];
+	$products_keywords = $_POST['products_keywords'];
+	$products_meta_title = $_POST['products_meta_title'];
+	$products_meta_description = $_POST['products_meta_description'];
+	$products_meta_keywords = $_POST['products_meta_keywords'];
+	$products_url = $_POST['products_url'];
+	$pInfo->products_startpage = $_POST['products_startpage'];
+   $products_startpage_sort = $_POST['products_startpage_sort'];
+} else {
+	$pInfo = new objectInfo(array ());
+}
+
+$manufacturers_array = array (array ('id' => '', 'text' => TEXT_NONE));
+$manufacturers_query = xtc_db_query("select manufacturers_id, manufacturers_name from ".TABLE_MANUFACTURERS." order by manufacturers_name");
+while ($manufacturers = xtc_db_fetch_array($manufacturers_query)) {
+	$manufacturers_array[] = array ('id' => $manufacturers['manufacturers_id'], 'text' => $manufacturers['manufacturers_name']);
+}
+
+$vpe_array = array (array ('id' => '', 'text' => TEXT_NONE));
+$vpe_query = xtc_db_query("select products_vpe_id, products_vpe_name from ".TABLE_PRODUCTS_VPE." WHERE language_id='".$_SESSION['languages_id']."' order by products_vpe_name");
+while ($vpe = xtc_db_fetch_array($vpe_query)) {
+	$vpe_array[] = array ('id' => $vpe['products_vpe_id'], 'text' => $vpe['products_vpe_name']);
+}
+
+$tax_class_array = array (array ('id' => '0', 'text' => TEXT_NONE));
+$tax_class_query = xtc_db_query("select tax_class_id, tax_class_title from ".TABLE_TAX_CLASS." order by tax_class_title");
+while ($tax_class = xtc_db_fetch_array($tax_class_query)) {
+	$tax_class_array[] = array ('id' => $tax_class['tax_class_id'], 'text' => $tax_class['tax_class_title']);
+}
+$shipping_statuses = array ();
+$shipping_statuses = xtc_get_shipping_status();
+$languages = xtc_get_languages();
+
+switch ($pInfo->products_status) {
+	case '0' :
+		$status = false;
+		$out_status = true;
+		break;
+	case '1' :
+	default :
+		$status = true;
+		$out_status = false;
+}
+
+if ($pInfo->products_startpage == '1') { $startpage_checked = true; } else { $startpage_checked = false; }
+
+?>
+<link rel="stylesheet" type="text/css" href="includes/javascript/spiffyCal/spiffyCal_v2_1.css">
+<script type="text/javascript" src="includes/javascript/spiffyCal/spiffyCal_v2_1.js"></script>
+<script type="text/javascript">
+  var dateAvailable = new ctlSpiffyCalendarBox("dateAvailable", "new_product", "products_date_available","btnDate1","<?php echo $pInfo->products_date_available; ?>",scBTNMODE_CUSTOMBLUE);
+</script>
+
+<tr><td>
+<?php $form_action = ($_GET['pID']) ? 'update_product' : 'insert_product'; ?>
+<?php $fsk18_array=array(array('id'=>0,'text'=>NO),array('id'=>1,'text'=>YES)); ?>
+<?php echo xtc_draw_form('new_product', FILENAME_CATEGORIES, 'cPath=' . $_GET['cPath'] . '&pID=' . $_GET['pID'] . '&action='.$form_action, 'post', 'enctype="multipart/form-data"'); ?>
+<span class="pageHeading"><?php echo sprintf(TEXT_NEW_PRODUCT, xtc_output_generated_category_path($current_category_id)); ?></span><br />
+<table width="100%"  border="0">
+  <tr>
+    <td><span class="main"><?php echo TEXT_PRODUCTS_STATUS; ?> <?php echo xtc_draw_separator('pixel_trans.gif', '24', '15') . '&nbsp;' . xtc_draw_radio_field('products_status', '1', $status) . '&nbsp;' . TEXT_PRODUCT_AVAILABLE . '&nbsp;' . xtc_draw_radio_field('products_status', '0', $out_status) . '&nbsp;' . TEXT_PRODUCT_NOT_AVAILABLE; ?><br />
+    </span>
+      <table width="100%" border="0">
+        <tr>
+          <td class="main" width="127"><?php echo TEXT_PRODUCTS_DATE_AVAILABLE; ?><br />
+              <small>(YYYY-MM-DD)</small></td>
+          <td class="main"><?php echo xtc_draw_separator('pixel_trans.gif', '24', '15') . '&nbsp;'; ?>
+              <script type="text/javascript">dateAvailable.writeControl(); dateAvailable.dateFormat="yyyy-MM-dd";</script></td>
+        </tr>
+      </table>
+      <span class="main"><br /></span>
+    </td><td>
+    <table bgcolor="f3f3f3" style="border: 1px solid; border-color: #cccccc;" "width="100%"  border="0">
+    <tr>
+        <td><span class="main"><?php echo TEXT_PRODUCTS_STARTPAGE; ?> <?php echo TEXT_PRODUCTS_STARTPAGE_YES . xtc_draw_radio_field('products_startpage', '1', $startpage_checked) . '&nbsp;' . TEXT_PRODUCTS_STARTPAGE_NO . xtc_draw_radio_field('products_startpage', '0', !$startpage_checked) ?></span></td>
+        <td><span class="main"><?php echo TEXT_PRODUCTS_STARTPAGE_SORT; ?>&nbsp;<?php echo  xtc_draw_input_field('products_startpage_sort', $pInfo->products_startpage_sort ,'size=3'); ?></span></td>
+    </tr>        
+    <tr>
+        <td><span class="main"><?php echo TEXT_PRODUCTS_SORT; ?>&nbsp;<?php echo  xtc_draw_input_field('products_sort', $pInfo->products_sort,'size=3'); ?></span></td>
+        <td><span class="main"><?php echo TEXT_PRODUCTS_QUANTITY; ?>&nbsp;<?php echo xtc_draw_input_field('products_quantity', $pInfo->products_quantity,'size=5'); ?></span></td>
+      </tr>
+              <tr>
+        <td><span class="main"><?php echo TEXT_PRODUCTS_MODEL; ?></span></td>
+        <td><span class="main"><?php echo  xtc_draw_input_field('products_model', $pInfo->products_model); ?></span></td>
+      </tr>
+                    <tr>
+        <td><span class="main"><?php echo TEXT_PRODUCTS_EAN; ?></span></td>
+        <td><span class="main"><?php echo  xtc_draw_input_field('products_ean', $pInfo->products_ean); ?></span></td>
+      </tr>
+      <tr>
+        <td><span class="main"><?php echo TEXT_PRODUCTS_MANUFACTURER; ?></span></td>
+        <td><span class="main"><?php echo xtc_draw_pull_down_menu('manufacturers_id', $manufacturers_array, $pInfo->manufacturers_id); ?></span></td>
+      </tr>
+      <tr>
+        <td><span class="main"><?php echo TEXT_PRODUCTS_VPE_VISIBLE.xtc_draw_selection_field('products_vpe_status', 'checkbox', '1',$pInfo->products_vpe_status==1 ? true : false); ?>
+        <?php echo TEXT_PRODUCTS_VPE_VALUE.xtc_draw_input_field('products_vpe_value', $pInfo->products_vpe_value,'size=4'); ?></span></td>
+        <td><span class="main"><?php echo TEXT_PRODUCTS_VPE. xtc_draw_pull_down_menu('products_vpe', $vpe_array, $pInfo->products_vpe='' ?  DEFAULT_PRODUCTS_VPE_ID : $pInfo->products_vpe); ?></span></td>
+      </tr>
+      <tr>
+        <td><span class="main"><?php echo TEXT_FSK18; ?>&nbsp;<?php echo xtc_draw_pull_down_menu('fsk18', $fsk18_array, $pInfo->products_fsk18); ?></span></td>
+        <td><span class="main"><?php echo TEXT_PRODUCTS_WEIGHT; ?><?php echo xtc_draw_input_field('products_weight', $pInfo->products_weight,'size=4'); ?><?php echo TEXT_PRODUCTS_WEIGHT_INFO; ?></span></td>
+      </tr>
+      <tr>
+         <td><span class="main"></span></td>
+         <td><span class="main"><?php echo TEXT_PRODUCTS_WIDTH; ?><?php echo xtc_draw_input_field('products_width', $pInfo->products_width,'size=4'); ?><?php echo TEXT_PRODUCTS_WIDTH_INFO; ?></span></td>
+       </tr>
+       <tr>
+         <td><span class="main"></span></td>
+         <td><span class="main"><?php echo TEXT_PRODUCTS_LENGTH; ?><?php echo xtc_draw_input_field('products_length', $pInfo->products_length,'size=4'); ?><?php echo TEXT_PRODUCTS_LENGTH_INFO; ?></span></td>
+       </tr>
+       <tr>
+         <td><span class="main"></span></td>
+         <td><span class="main"><?php echo TEXT_PRODUCTS_HEIGHT; ?><?php echo xtc_draw_input_field('products_height', $pInfo->products_height,'size=4'); ?><?php echo TEXT_PRODUCTS_HEIGHT_INFO; ?></span></td>
+       </tr>
+       <tr>
+<?php if (ACTIVATE_SHIPPING_STATUS=='true') { ?>
+        <td><span class="main"><?php echo BOX_SHIPPING_STATUS.':'; ?></span></td>
+        <td><span class="main"><?php echo xtc_draw_pull_down_menu('shipping_status', $shipping_statuses, $pInfo->products_shippingtime); ?></span></td>
+      </tr>
+<?php } ?>
+      <tr>
+          <?php
+
+$files = array ();
+if ($dir = opendir(DIR_FS_CATALOG.'templates/'.CURRENT_TEMPLATE.'/module/product_info/')) {
+	while (($file = readdir($dir)) !== false) {
+		if (is_file(DIR_FS_CATALOG.'templates/'.CURRENT_TEMPLATE.'/module/product_info/'.$file) and ($file != "index.html")) {
+			$files[] = array ('id' => $file, 'text' => $file);
+		} //if
+	} // while
+	closedir($dir);
+}
+$default_array = array ();
+// set default value in dropdown!
+if ($content['content_file'] == '') {
+	$default_array[] = array ('id' => 'default', 'text' => TEXT_SELECT);
+	$default_value = $pInfo->product_template;
+	$files = array_merge($default_array, $files);
+} else {
+	$default_array[] = array ('id' => 'default', 'text' => TEXT_NO_FILE);
+	$default_value = $pInfo->product_template;
+	$files = array_merge($default_array, $files);
+}
+echo '<td class="main">'.TEXT_CHOOSE_INFO_TEMPLATE.':</td>';
+echo '<td><span class="main">'.xtc_draw_pull_down_menu('info_template', $files, $default_value);
+?>
+        </span></td>
+      </tr>
+      <tr>
+
+
+          <?php
+
+$files = array ();
+if ($dir = opendir(DIR_FS_CATALOG.'templates/'.CURRENT_TEMPLATE.'/module/product_options/')) {
+	while (($file = readdir($dir)) !== false) {
+		if (is_file(DIR_FS_CATALOG.'templates/'.CURRENT_TEMPLATE.'/module/product_options/'.$file) and ($file != "index.html")) {
+			$files[] = array ('id' => $file, 'text' => $file);
+		} //if
+	} // while
+	closedir($dir);
+}
+// set default value in dropdown!
+$default_array = array ();
+if ($content['content_file'] == '') {
+	$default_array[] = array ('id' => 'default', 'text' => TEXT_SELECT);
+	$default_value = $pInfo->options_template;
+	$files = array_merge($default_array, $files);
+} else {
+	$default_array[] = array ('id' => 'default', 'text' => TEXT_NO_FILE);
+	$default_value = $pInfo->options_template;
+	$files = array_merge($default_array, $files);
+}
+echo '<td class="main">'.TEXT_CHOOSE_OPTIONS_TEMPLATE.':'.'</td>';
+echo '<td><span class="main">'.xtc_draw_pull_down_menu('options_template', $files, $default_value);
+?>
+        </span></td>
+      </tr>
+    </table></td>
+  </tr>
+</table>
+  <br /><br />
+  <?php for ($i = 0, $n = sizeof($languages); $i < $n; $i++) { ?>
+  <table width="100%" border="0">
+  <tr>
+  <td bgcolor="000000" height="10"></td>
+  </tr>
+  <tr>
+    <td bgcolor="#FFCC33" valign="top" class="main"><?php echo xtc_image(DIR_WS_LANGUAGES . $languages[$i]['directory'] .'/'. $languages[$i]['image'], $languages[$i]['name']); ?>&nbsp;<?php echo TEXT_PRODUCTS_NAME; ?><?php echo xtc_draw_input_field('products_name[' . $languages[$i]['id'] . ']', (($products_name[$languages[$i]['id']]) ? stripslashes($products_name[$languages[$i]['id']]) : xtc_get_products_name($pInfo->products_id, $languages[$i]['id'])),'size=60'); ?></td>
+  </tr>
+  <tr>
+    <td class="main"><?php echo TEXT_PRODUCTS_URL . '&nbsp;<small>' . TEXT_PRODUCTS_URL_WITHOUT_HTTP . '</small>'; ?><?php echo xtc_draw_input_field('products_url[' . $languages[$i]['id'] . ']', (($products_url[$languages[$i]['id']]) ? stripslashes($products_url[$languages[$i]['id']]) : xtc_get_products_url($pInfo->products_id, $languages[$i]['id'])),'size=60'); ?></td>
+  </tr>
+</table>
+
+<!-- input boxes desc, meta etc -->
+<table width="100%" border="0">
+  <tr>
+    <td class="main">
+        <STRONG><?php echo TEXT_PRODUCTS_DESCRIPTION; ?></STRONG><br />
+        <?php echo xtc_draw_textarea_field('products_description_' . $languages[$i]['id'], 'soft', '103', '30', (($products_description[$languages[$i]['id']]) ? stripslashes($products_description[$languages[$i]['id']]) : xtc_get_products_description($pInfo->products_id, $languages[$i]['id']))); ?>
+    </td>
+  </tr>
+  <tr>
+    <td class="main" valign="top">
+    
+    <table>
+    <tr>
+     <td width="60%" valign="top" class="main">
+        <STRONG><?php echo TEXT_PRODUCTS_SHORT_DESCRIPTION; ?></STRONG><br />
+        <?php echo xtc_draw_textarea_field('products_short_description_' . $languages[$i]['id'], 'soft', '103', '20', (($products_short_description[$languages[$i]['id']]) ? stripslashes($products_short_description[$languages[$i]['id']]) : xtc_get_products_short_description($pInfo->products_id, $languages[$i]['id']))); ?>
+     </td>
+     <td class="main" valign="top" style="padding: 15px;">
+        <?php echo TEXT_PRODUCTS_KEYWORDS; ?><br />
+        <?php echo xtc_draw_input_field('products_keywords[' . $languages[$i]['id'] . ']',(($products_keywords[$languages[$i]['id']]) ? stripslashes($products_keywords[$languages[$i]['id']]) : xtc_get_products_keywords($pInfo->products_id, $languages[$i]['id'])), 'size=25 maxlenght=255'); ?><br />     
+        <?php echo TEXT_META_TITLE; ?><br />
+        <?php echo xtc_draw_input_field('products_meta_title[' . $languages[$i]['id'] . ']',(($products_meta_title[$languages[$i]['id']]) ? stripslashes($products_meta_title[$languages[$i]['id']]) : xtc_get_products_meta_title($pInfo->products_id, $languages[$i]['id'])), 'size=25 maxlenght=50'); ?><br />
+        <?php echo TEXT_META_DESCRIPTION; ?><br />
+        <?php echo xtc_draw_input_field('products_meta_description[' . $languages[$i]['id'] . ']',(($products_meta_description[$languages[$i]['id']]) ? stripslashes($products_meta_description[$languages[$i]['id']]) : xtc_get_products_meta_description($pInfo->products_id, $languages[$i]['id'])), 'size=25 maxlenght=50'); ?><br />
+        <?php echo TEXT_META_KEYWORDS; ?><br />
+        <?php echo xtc_draw_input_field('products_meta_keywords[' . $languages[$i]['id'] . ']', (($products_meta_keywords[$languages[$i]['id']]) ? stripslashes($products_meta_keywords[$languages[$i]['id']]) : xtc_get_products_meta_keywords($pInfo->products_id, $languages[$i]['id'])), 'size=25 maxlenght=50'); ?> 
+     </td>
+    </tr>
+    </table>
+   
+   </td>
+  </tr>
+</table>
+
+<?php } ?>
+<table width="100%"><tr><td style="border-bottom: thin dashed Gray;">&nbsp;</td></tr></table>
+<table width="100%" border="0" cellpadding="0" cellspacing="0">
+<tr><td><span class="main" style="padding-left: 10px;"><?php echo HEADING_PRODUCT_IMAGES; ?></span></td></tr>
+<tr><td><br />
+<table width="100%" border="0" bgcolor="f3f3f3" style="border: 1px solid; border-color: #cccccc;">
+
+<?php
+
+include (DIR_WS_MODULES.'products_images.php');
+?>
+    <tr><td colspan="4"><?php echo xtc_draw_separator('pixel_trans.gif', '1', '10'); ?></td></tr>
+<?php
+
+if (GROUP_CHECK == 'true') {
+	$customers_statuses_array = xtc_get_customers_statuses();
+	$customers_statuses_array = array_merge(array (array ('id' => 'all', 'text' => TXT_ALL)), $customers_statuses_array);
+?>
+<tr>
+<td style="border-top: 1px solid; border-color: #ff0000;" valign="top" class="main" ><?php echo ENTRY_CUSTOMERS_STATUS; ?></td>
+<td style="border-top: 1px solid; border-left: 1px solid; border-color: #ff0000;"  bgcolor="#FFCC33" class="main">
+<?php
+
+	for ($i = 0; $n = sizeof($customers_statuses_array), $i < $n; $i ++) {
+		$code = '$id=$pInfo->group_permission_'.$customers_statuses_array[$i]['id'].';';
+		eval ($code);
+		
+		if ($id==1) {
+
+			$checked = 'checked ';
+			
+		} else {
+			$checked = '';
+		}
+		echo '<input type="checkbox" name="groups[]" value="'.$customers_statuses_array[$i]['id'].'"'.$checked.'> '.$customers_statuses_array[$i]['text'].'<br />';
+	}
+
+?>
+</td>
+</tr>
+<?php
+
+}
+?>
+</table>
+</td></tr>
+
+<tr><td>
+<table width="100%" border="0">
+        <tr>
+          <td colspan="4"><?php include(DIR_WS_MODULES.'group_prices.php'); ?></td>
+        </tr>
+        <tr>
+          <td colspan="4"><?php echo xtc_draw_separator('pixel_trans.gif', '1', '10'); ?></td>
+        </tr>
+</table>
+</td></tr>
+
+    <tr>
+     <td class="main" align="right">
+      	<?php
+
+echo xtc_draw_hidden_field('products_date_added', (($pInfo->products_date_added) ? $pInfo->products_date_added : date('Y-m-d')));
+echo xtc_draw_hidden_field('products_id', $pInfo->products_id);
+?>
+      	<input type="submit" class="button" value="<?php echo BUTTON_SAVE; ?>" onClick="return confirm('<?php echo SAVE_ENTRY; ?>')">
+      	&nbsp;&nbsp;
+      	<?php echo '<a class="button" href="' . xtc_href_link(FILENAME_CATEGORIES, 'cPath=' . $cPath . '&pID=' . $_GET['pID']) . '">' . BUTTON_CANCEL . '</a>'; ?>
+  	 </td>
     </tr></form>
\ No newline at end of file
diff --git a/includes/classes/order.php b/includes/classes/order.php
index fa8e5da..8452424 100644
--- a/includes/classes/order.php
+++ b/includes/classes/order.php
@@ -1,424 +1,427 @@
-<?php
-/* -----------------------------------------------------------------------------------------
-   $Id: order.php 1533 2006-08-20 19:03:11Z mz $   
-
-   XT-Commerce - community made shopping
-   http://www.xt-commerce.com
-
-   Copyright (c) 2003 XT-Commerce
-   -----------------------------------------------------------------------------------------
-   based on: 
-   (c) 2000-2001 The Exchange Project  (earlier name of osCommerce)
-   (c) 2002-2003 osCommerce(order.php,v 1.32 2003/02/26); www.oscommerce.com 
-   (c) 2003	 nextcommerce (order.php,v 1.28 2003/08/18); www.nextcommerce.org
-
-   Released under the GNU General Public License
-   -----------------------------------------------------------------------------------------
-   Third Party contribution:
-
-   Credit Class/Gift Vouchers/Discount Coupons (Version 5.10)
-   http://www.oscommerce.com/community/contributions,282
-   Copyright (c) Strider | Strider@oscworks.com
-   Copyright (c  Nick Stanko of UkiDev.com, nick@ukidev.com
-   Copyright (c) Andre ambidex@gmx.net
-   Copyright (c) 2001,2002 Ian C Wilson http://www.phesis.org
-
-   credit card encryption functions for the catalog module
-   BMC 2003 for the CC CVV Module
-
-
-   Released under the GNU General Public License
-   ---------------------------------------------------------------------------------------*/
-
-  // include needed functions
-  require_once(DIR_FS_INC . 'xtc_date_long.inc.php');
-  require_once(DIR_FS_INC . 'xtc_address_format.inc.php');
-  require_once(DIR_FS_INC . 'xtc_get_country_name.inc.php');
-  require_once(DIR_FS_INC . 'xtc_get_zone_code.inc.php');
-  require_once(DIR_FS_INC . 'xtc_get_tax_description.inc.php');
-
-
-  class order {
-    var $info, $totals, $products, $customer, $delivery, $content_type;
-
-    function order($order_id = '') {
-    	global $xtPrice;
-      $this->info = array();
-      $this->totals = array();
-      $this->products = array();
-      $this->customer = array();
-      $this->delivery = array();
-
-
-      if (xtc_not_null($order_id)) {
-        $this->query($order_id);
-      } else {
-        $this->cart();
-      }
-    }
-
-    function query($order_id) {
-
-      $order_id = xtc_db_prepare_input($order_id);
-
-      $order_query = xtc_db_query("SELECT
-                                   *
-                                   FROM " . TABLE_ORDERS . " WHERE
-                                   orders_id = '" . xtc_db_input($order_id) . "'");
-
-      $order = xtc_db_fetch_array($order_query);
-
-      $totals_query = xtc_db_query("SELECT * FROM " . TABLE_ORDERS_TOTAL . " where orders_id = '" . xtc_db_input($order_id) . "' order by sort_order");
-      while ($totals = xtc_db_fetch_array($totals_query)) {
-        $this->totals[] = array('title' => $totals['title'],
-                                'text' =>$totals['text'],
-                                'value'=>$totals['value']);
-      }
-
-      $order_total_query = xtc_db_query("select text from " . TABLE_ORDERS_TOTAL . " where orders_id = '" . $order_id . "' and class = 'ot_total'");
-      $order_total = xtc_db_fetch_array($order_total_query);
-
-      $shipping_method_query = xtc_db_query("select title from " . TABLE_ORDERS_TOTAL . " where orders_id = '" . $order_id . "' and class = 'ot_shipping'");
-      $shipping_method = xtc_db_fetch_array($shipping_method_query);
-
-      $order_status_query = xtc_db_query("select orders_status_name from " . TABLE_ORDERS_STATUS . " where orders_status_id = '" . $order['orders_status'] . "' and language_id = '" . $_SESSION['languages_id'] . "'");
-      $order_status = xtc_db_fetch_array($order_status_query);
-
-      $this->info = array('currency' => $order['currency'],
-                          'currency_value' => $order['currency_value'],
-                          'payment_method' => $order['payment_method'],
-                          'cc_type' => $order['cc_type'],
-                          'cc_owner' => $order['cc_owner'],
-                          'cc_number' => $order['cc_number'],
-                          'cc_expires' => $order['cc_expires'],
-// BMC CC Mod Start
-                          'cc_start' => $order['cc_start'],
-                          'cc_issue' => $order['cc_issue'],
-                          'cc_cvv' => $order['cc_cvv'],
-// BMC CC Mod End
-                          'date_purchased' => $order['date_purchased'],
-                          'orders_status' => $order_status['orders_status_name'],
-                          'last_modified' => $order['last_modified'],
-                          'total' => strip_tags($order_total['text']),
-                          'shipping_method' => ((substr($shipping_method['title'], -1) == ':') ? substr(strip_tags($shipping_method['title']), 0, -1) : strip_tags($shipping_method['title'])),
-                          'comments' => $order['comments']
-                          );
-
-      $this->customer = array('id' => $order['customers_id'],
-                              'name' => $order['customers_name'],
-                              'firstname' => $order['customers_firstname'],
-                              'lastname' => $order['customers_lastname'],                            
-                              'csID' => $order['customers_cid'],
-                              'company' => $order['customers_company'],
-                              'street_address' => $order['customers_street_address'],
-                              'suburb' => $order['customers_suburb'],
-                              'city' => $order['customers_city'],
-                              'postcode' => $order['customers_postcode'],
-                              'state' => $order['customers_state'],
-                              'country' => $order['customers_country'],
-                              'format_id' => $order['customers_address_format_id'],
-                              'telephone' => $order['customers_telephone'],
-                              'email_address' => $order['customers_email_address']);
-
-      $this->delivery = array('name' => $order['delivery_name'],
-      							'firstname' => $order['delivery_firstname'],
-      							'lastname' => $order['delivery_lastname'],
-                              'company' => $order['delivery_company'],
-                              'street_address' => $order['delivery_street_address'],
-                              'suburb' => $order['delivery_suburb'],
-                              'city' => $order['delivery_city'],
-                              'postcode' => $order['delivery_postcode'],
-                              'state' => $order['delivery_state'],
-                              'country' => $order['delivery_country'],
-                              'format_id' => $order['delivery_address_format_id']);
-
-      if (empty($this->delivery['name']) && empty($this->delivery['street_address'])) {
-        $this->delivery = false;
-      }
-
-      $this->billing = array('name' => $order['billing_name'],
-      							'firstname' => $order['billing_firstname'],
-      							'lastname' => $order['billing_lastname'],
-                             'company' => $order['billing_company'],
-                             'street_address' => $order['billing_street_address'],
-                             'suburb' => $order['billing_suburb'],
-                             'city' => $order['billing_city'],
-                             'postcode' => $order['billing_postcode'],
-                             'state' => $order['billing_state'],
-                             'country' => $order['billing_country'],
-                             'format_id' => $order['billing_address_format_id']);
-
-      $index = 0;
-      $orders_products_query = xtc_db_query("SELECT * FROM " . TABLE_ORDERS_PRODUCTS . " where orders_id = '" . xtc_db_input($order_id) . "'");
-      while ($orders_products = xtc_db_fetch_array($orders_products_query)) {
-        $this->products[$index] = array('qty' => $orders_products['products_quantity'],
-	                                	'id' => $orders_products['products_id'],
-                                        'name' => $orders_products['products_name'],
-                                        'model' => $orders_products['products_model'],
-                                        'tax' => $orders_products['products_tax'],
-					                    'price'=>$orders_products['products_price'],
-					                    'shipping_time'=>$orders_products['products_shipping_time'],
-                                        'final_price' => $orders_products['final_price']);
-
-        $subindex = 0;
-        $attributes_query = xtc_db_query("SELECT * FROM " . TABLE_ORDERS_PRODUCTS_ATTRIBUTES . " where orders_id = '" . xtc_db_input($order_id) . "' and orders_products_id = '" . $orders_products['orders_products_id'] . "'");
-        if (xtc_db_num_rows($attributes_query)) {
-          while ($attributes = xtc_db_fetch_array($attributes_query)) {
-            $this->products[$index]['attributes'][$subindex] = array('option' => $attributes['products_options'],
-                                                                     'value' => $attributes['products_options_values'],
-                                                                     'prefix' => $attributes['price_prefix'],
-                                                                     'price' => $attributes['options_values_price']);
-
-            $subindex++;
-          }
-        }
-
-        $this->info['tax_groups']["{$this->products[$index]['tax']}"] = '1';
-
-        $index++;
-      }
-    }
-    
-        function getOrderData($oID) {
-    	global $xtPrice;
-    	
-    	require_once(DIR_FS_INC . 'xtc_get_attributes_model.inc.php');
-    	
-    	$order_query = "SELECT
-	        				products_id,
-	        				orders_products_id,
-	        				products_model,
-	        				products_name,
-	        				final_price,
-	        			  	products_shipping_time,
-	        				products_quantity
-	        				FROM ".TABLE_ORDERS_PRODUCTS."
-	        				WHERE orders_id='".(int) $oID."'";
-	$order_data = array ();
-	$order_query = xtc_db_query($order_query);
-	while ($order_data_values = xtc_db_fetch_array($order_query)) {
-		$attributes_query = "SELECT
-		        				products_options,
-		        				products_options_values,
-		        				price_prefix,
-		        				options_values_price
-		        				FROM ".TABLE_ORDERS_PRODUCTS_ATTRIBUTES."
-		        				WHERE orders_products_id='".$order_data_values['orders_products_id']."'";
-		$attributes_data = '';
-		$attributes_model = '';
-		$attributes_query = xtc_db_query($attributes_query);
-		while ($attributes_data_values = xtc_db_fetch_array($attributes_query)) {
-			$attributes_data .= '<br />'.$attributes_data_values['products_options'].':'.$attributes_data_values['products_options_values'];
-			$attributes_model .= '<br />'.xtc_get_attributes_model($order_data_values['products_id'], $attributes_data_values['products_options_values'],$attributes_data_values['products_options']);
-
-		}
-		$order_data[] = array ('PRODUCTS_MODEL' => $order_data_values['products_model'], 'PRODUCTS_NAME' => $order_data_values['products_name'],'PRODUCTS_SHIPPING_TIME' => $order_data_values['products_shipping_time'], 'PRODUCTS_ATTRIBUTES' => $attributes_data, 'PRODUCTS_ATTRIBUTES_MODEL' => $attributes_model, 'PRODUCTS_PRICE' => $xtPrice->xtcFormat($order_data_values['final_price'], true),'PRODUCTS_SINGLE_PRICE' => $xtPrice->xtcFormat($order_data_values['final_price']/$order_data_values['products_quantity'], true), 'PRODUCTS_QTY' => $order_data_values['products_quantity']);
-
-	}
-	
-	return $order_data;
-    	
-    }
-    
-    function getTotalData($oID) {
-    	global $xtPrice,$db;
-    	
-    		// get order_total data
-	$oder_total_query = "SELECT
-	  					title,
-	  					text,
-	                    class,
-	                    value,
-	  					sort_order
-	  					FROM ".TABLE_ORDERS_TOTAL."
-	  					WHERE orders_id='".(int) $oID."'
-	  					ORDER BY sort_order ASC";
-
-	$order_total = array ();
-	$oder_total_query = xtc_db_query($oder_total_query);
-	while ($oder_total_values = xtc_db_fetch_array($oder_total_query)) {
-
-
-		$order_total[] = array ('TITLE' => $oder_total_values['title'], 'CLASS' => $oder_total_values['class'], 'VALUE' => $oder_total_values['value'], 'TEXT' => $oder_total_values['text']);
-		if ($oder_total_values['class'] = 'ot_total')
-			$total = $oder_total_values['value'];
-
-	}
-	
-	return array('data'=>$order_total,'total'=>$total);
-	
-    }
-
-    function cart() {
-      global $currencies,$xtPrice;
-
-      $this->content_type = $_SESSION['cart']->get_content_type();
-
-      $customer_address_query = xtc_db_query("select c.payment_unallowed,c.shipping_unallowed,c.customers_firstname,c.customers_cid, c.customers_gender,c.customers_lastname, c.customers_telephone, c.customers_email_address, ab.entry_company, ab.entry_street_address, ab.entry_suburb, ab.entry_postcode, ab.entry_city, ab.entry_zone_id, z.zone_name, co.countries_id, co.countries_name, co.countries_iso_code_2, co.countries_iso_code_3, co.address_format_id, ab.entry_state from " . TABLE_CUSTOMERS . " c, " . TABLE_ADDRESS_BOOK . " ab left join " . TABLE_ZONES . " z on (ab.entry_zone_id = z.zone_id) left join " . TABLE_COUNTRIES . " co on (ab.entry_country_id = co.countries_id) where c.customers_id = '" . $_SESSION['customer_id'] . "' and ab.customers_id = '" . $_SESSION['customer_id'] . "' and c.customers_default_address_id = ab.address_book_id");
-      $customer_address = xtc_db_fetch_array($customer_address_query);
-
-      $shipping_address_query = xtc_db_query("select ab.entry_firstname, ab.entry_lastname, ab.entry_company, ab.entry_street_address, ab.entry_suburb, ab.entry_postcode, ab.entry_city, ab.entry_zone_id, z.zone_name, ab.entry_country_id, c.countries_id, c.countries_name, c.countries_iso_code_2, c.countries_iso_code_3, c.address_format_id, ab.entry_state from " . TABLE_ADDRESS_BOOK . " ab left join " . TABLE_ZONES . " z on (ab.entry_zone_id = z.zone_id) left join " . TABLE_COUNTRIES . " c on (ab.entry_country_id = c.countries_id) where ab.customers_id = '" . $_SESSION['customer_id'] . "' and ab.address_book_id = '" . $_SESSION['sendto'] . "'");
-      $shipping_address = xtc_db_fetch_array($shipping_address_query);
-      
-      $billing_address_query = xtc_db_query("select ab.entry_firstname, ab.entry_lastname, ab.entry_company, ab.entry_street_address, ab.entry_suburb, ab.entry_postcode, ab.entry_city, ab.entry_zone_id, z.zone_name, ab.entry_country_id, c.countries_id, c.countries_name, c.countries_iso_code_2, c.countries_iso_code_3, c.address_format_id, ab.entry_state from " . TABLE_ADDRESS_BOOK . " ab left join " . TABLE_ZONES . " z on (ab.entry_zone_id = z.zone_id) left join " . TABLE_COUNTRIES . " c on (ab.entry_country_id = c.countries_id) where ab.customers_id = '" . $_SESSION['customer_id'] . "' and ab.address_book_id = '" . $_SESSION['billto'] . "'");
-      $billing_address = xtc_db_fetch_array($billing_address_query);
-
-      $tax_address_query = xtc_db_query("select ab.entry_country_id, ab.entry_zone_id from " . TABLE_ADDRESS_BOOK . " ab left join " . TABLE_ZONES . " z on (ab.entry_zone_id = z.zone_id) where ab.customers_id = '" . $_SESSION['customer_id'] . "' and ab.address_book_id = '" . ($this->content_type == 'virtual' ? $_SESSION['billto'] : $_SESSION['sendto']) . "'");
-      $tax_address = xtc_db_fetch_array($tax_address_query);
-
-      $this->info = array('order_status' => DEFAULT_ORDERS_STATUS_ID,
-                          'currency' => $_SESSION['currency'],
-                          'currency_value' => $xtPrice->currencies[$_SESSION['currency']]['value'],
-                          'payment_method' => $_SESSION['payment'],
-                          'cc_type' => (isset($_SESSION['payment'])=='cc' && isset($_SESSION['ccard']['cc_type']) ? $_SESSION['ccard']['cc_type'] : ''),
-                          'cc_owner'=>(isset($_SESSION['payment'])=='cc' && isset($_SESSION['ccard']['cc_owner']) ? $_SESSION['ccard']['cc_owner'] : ''),
-                          'cc_number' => (isset($_SESSION['payment'])=='cc' && isset($_SESSION['ccard']['cc_number']) ? $_SESSION['ccard']['cc_number'] : ''),
-                          'cc_expires' => (isset($_SESSION['payment'])=='cc' && isset($_SESSION['ccard']['cc_expires']) ? $_SESSION['ccard']['cc_expires'] : ''),
-                          'cc_start' => (isset($_SESSION['payment'])=='cc' && isset($_SESSION['ccard']['cc_start']) ? $_SESSION['ccard']['cc_start'] : ''),
-                          'cc_issue' => (isset($_SESSION['payment'])=='cc' && isset($_SESSION['ccard']['cc_issue']) ? $_SESSION['ccard']['cc_issue'] : ''),
-                          'cc_cvv' => (isset($_SESSION['payment'])=='cc' && isset($_SESSION['ccard']['cc_cvv']) ? $_SESSION['ccard']['cc_cvv'] : ''),
-                          'shipping_method' => $_SESSION['shipping']['title'],
-                          'shipping_cost' => $_SESSION['shipping']['cost'],
-                          'comments' => $_SESSION['comments'],
-                          'shipping_class'=>$_SESSION['shipping']['id'],
-                          'payment_class' => $_SESSION['payment'],
-                          );
-
-      if (isset($_SESSION['payment']) && is_object($_SESSION['payment'])) {
-        $this->info['payment_method'] = $_SESSION['payment']->title;
-        $this->info['payment_class'] = $_SESSION['payment']->title;
-        if ( isset($_SESSION['payment']->order_status) && is_numeric($_SESSION['payment']->order_status) && ($_SESSION['payment']->order_status > 0) ) {
-          $this->info['order_status'] = $_SESSION['payment']->order_status;
-        }
-      }
-
-      $this->customer = array('firstname' => $customer_address['customers_firstname'],
-                              'lastname' => $customer_address['customers_lastname'],
-                              'csID' => $customer_address['customers_cid'],
-                              'gender' => $customer_address['customers_gender'],
-                              'company' => $customer_address['entry_company'],
-                              'street_address' => $customer_address['entry_street_address'],
-                              'suburb' => $customer_address['entry_suburb'],
-                              'city' => $customer_address['entry_city'],
-                              'postcode' => $customer_address['entry_postcode'],
-                              'state' => ((xtc_not_null($customer_address['entry_state'])) ? $customer_address['entry_state'] : $customer_address['zone_name']),
-                              'zone_id' => $customer_address['entry_zone_id'],
-                              'country' => array('id' => $customer_address['countries_id'], 'title' => $customer_address['countries_name'], 'iso_code_2' => $customer_address['countries_iso_code_2'], 'iso_code_3' => $customer_address['countries_iso_code_3']),
-                              'format_id' => $customer_address['address_format_id'],
-                              'telephone' => $customer_address['customers_telephone'],
-                              'payment_unallowed' => $customer_address['payment_unallowed'],
-                              'shipping_unallowed' => $customer_address['shipping_unallowed'],
-                              'email_address' => $customer_address['customers_email_address']);
-
-      $this->delivery = array('firstname' => $shipping_address['entry_firstname'],
-                              'lastname' => $shipping_address['entry_lastname'],
-                              'company' => $shipping_address['entry_company'],
-                              'street_address' => $shipping_address['entry_street_address'],
-                              'suburb' => $shipping_address['entry_suburb'],
-                              'city' => $shipping_address['entry_city'],
-                              'postcode' => $shipping_address['entry_postcode'],
-                              'state' => ((xtc_not_null($shipping_address['entry_state'])) ? $shipping_address['entry_state'] : $shipping_address['zone_name']),
-                              'zone_id' => $shipping_address['entry_zone_id'],
-                              'country' => array('id' => $shipping_address['countries_id'], 'title' => $shipping_address['countries_name'], 'iso_code_2' => $shipping_address['countries_iso_code_2'], 'iso_code_3' => $shipping_address['countries_iso_code_3']),
-                              'country_id' => $shipping_address['entry_country_id'],
-                              'format_id' => $shipping_address['address_format_id']);
-
-      $this->billing = array('firstname' => $billing_address['entry_firstname'],
-                             'lastname' => $billing_address['entry_lastname'],
-                             'company' => $billing_address['entry_company'],
-                             'street_address' => $billing_address['entry_street_address'],
-                             'suburb' => $billing_address['entry_suburb'],
-                             'city' => $billing_address['entry_city'],
-                             'postcode' => $billing_address['entry_postcode'],
-                             'state' => ((xtc_not_null($billing_address['entry_state'])) ? $billing_address['entry_state'] : $billing_address['zone_name']),
-                             'zone_id' => $billing_address['entry_zone_id'],
-                             'country' => array('id' => $billing_address['countries_id'], 'title' => $billing_address['countries_name'], 'iso_code_2' => $billing_address['countries_iso_code_2'], 'iso_code_3' => $billing_address['countries_iso_code_3']),
-                             'country_id' => $billing_address['entry_country_id'],
-                             'format_id' => $billing_address['address_format_id']);
-
-      $index = 0;
-      $products = $_SESSION['cart']->get_products();
-      for ($i=0, $n=sizeof($products); $i<$n; $i++) {
-
-        $products_price=$xtPrice->xtcGetPrice($products[$i]['id'],
-                                        $format=false,
-                                        $products[$i]['quantity'],
-                                        $products[$i]['tax_class_id'],
-                                        '')+$xtPrice->xtcFormat($_SESSION['cart']->attributes_price($products[$i]['id']),false);
-
-        $this->products[$index] = array('qty' => $products[$i]['quantity'],
-                                        'name' => $products[$i]['name'],
-                                        'model' => $products[$i]['model'],
-                                        'tax_class_id'=> $products[$i]['tax_class_id'],
-                                        'tax' => xtc_get_tax_rate($products[$i]['tax_class_id'], $tax_address['entry_country_id'], $tax_address['entry_zone_id']),
-                                        'tax_description' => xtc_get_tax_description($products[$i]['tax_class_id'], $tax_address['entry_country_id'], $tax_address['entry_zone_id']),
-                                        'price' =>  $products_price ,
-                            		    'final_price' => $products_price*$products[$i]['quantity'],
-                            		    'shipping_time'=>$products[$i]['shipping_time'],
-					                    'weight' => $products[$i]['weight'],
-                                        'id' => $products[$i]['id']);
-
-        if ($products[$i]['attributes']) {
-          $subindex = 0;
-          reset($products[$i]['attributes']);
-          while (list($option, $value) = each($products[$i]['attributes'])) {
-            $attributes_query = xtc_db_query("select popt.products_options_name, poval.products_options_values_name, pa.options_values_price, pa.price_prefix from " . TABLE_PRODUCTS_OPTIONS . " popt, " . TABLE_PRODUCTS_OPTIONS_VALUES . " poval, " . TABLE_PRODUCTS_ATTRIBUTES . " pa where pa.products_id = '" . $products[$i]['id'] . "' and pa.options_id = '" . $option . "' and pa.options_id = popt.products_options_id and pa.options_values_id = '" . $value . "' and pa.options_values_id = poval.products_options_values_id and popt.language_id = '" . $_SESSION['languages_id'] . "' and poval.language_id = '" . $_SESSION['languages_id'] . "'");
-            $attributes = xtc_db_fetch_array($attributes_query);
-
-            $this->products[$index]['attributes'][$subindex] = array('option' => $attributes['products_options_name'],
-                                                                     'value' => $attributes['products_options_values_name'],
-                                                                     'option_id' => $option,
-                                                                     'value_id' => $value,
-                                                                     'prefix' => $attributes['price_prefix'],
-                                                                     'price' => $attributes['options_values_price']);
-
-            $subindex++;
-          }
-        }
-
-        $shown_price = $this->products[$index]['final_price'];
-        $this->info['subtotal'] += $shown_price;
-        if ($_SESSION['customers_status']['customers_status_ot_discount_flag'] == 1){
-          $shown_price_tax = $shown_price-($shown_price/100 * $_SESSION['customers_status']['customers_status_ot_discount']);
-        }
-
-        $products_tax = $this->products[$index]['tax'];
-        $products_tax_description = $this->products[$index]['tax_description'];
-        if ($_SESSION['customers_status']['customers_status_show_price_tax'] == '1') {
-          if ($_SESSION['customers_status']['customers_status_ot_discount_flag'] == 1) {
-            $this->info['tax'] += $shown_price_tax - ($shown_price_tax / (($products_tax < 10) ? "1.0" . str_replace('.', '', $products_tax) : "1." . str_replace('.', '', $products_tax)));
-            $this->info['tax_groups'][TAX_ADD_TAX."$products_tax_description"] += (($shown_price_tax /(100+$products_tax)) * $products_tax);
-          } else {
-            $this->info['tax'] += $shown_price - ($shown_price / (($products_tax < 10) ? "1.0" . str_replace('.', '', $products_tax) : "1." . str_replace('.', '', $products_tax)));
-            $this->info['tax_groups'][TAX_ADD_TAX . "$products_tax_description"] += (($shown_price /(100+$products_tax)) * $products_tax);
-          }
-        } else {
-          if ($_SESSION['customers_status']['customers_status_ot_discount_flag'] == 1) {
-            $this->info['tax'] += ($shown_price_tax/100) * ($products_tax);
-            $this->info['tax_groups'][TAX_NO_TAX . "$products_tax_description"] += ($shown_price_tax/100) * ($products_tax);
-          } else {
-            $this->info['tax'] += ($shown_price/100) * ($products_tax);
-            $this->info['tax_groups'][TAX_NO_TAX . "$products_tax_description"] += ($shown_price/100) * ($products_tax);
-          }
-        }
-        $index++;
-      }
-
- //$this->info['shipping_cost']=0;
-      if ($_SESSION['customers_status']['customers_status_show_price_tax'] == '0') {
-        $this->info['total'] = $this->info['subtotal']  + $xtPrice->xtcFormat($this->info['shipping_cost'], false,0,true);
-        if ($_SESSION['customers_status']['customers_status_ot_discount_flag'] == '1') {
-          $this->info['total'] -= ($this->info['subtotal'] /100 * $_SESSION['customers_status']['customers_status_ot_discount']);
-        }
-      } else {
-		
-        $this->info['total'] = $this->info['subtotal']  + $xtPrice->xtcFormat($this->info['shipping_cost'],false,0,true);
-        if ($_SESSION['customers_status']['customers_status_ot_discount_flag'] == '1') {
-          $this->info['total'] -= ($this->info['subtotal'] /100 * $_SESSION['customers_status']['customers_status_ot_discount']);
-        }
-      }
-
-    }
-
-  }
+<?php
+/* -----------------------------------------------------------------------------------------
+   $Id: order.php 1533 2006-08-20 19:03:11Z mz $   
+
+   XT-Commerce - community made shopping
+   http://www.xt-commerce.com
+
+   Copyright (c) 2003 XT-Commerce
+   -----------------------------------------------------------------------------------------
+   based on: 
+   (c) 2000-2001 The Exchange Project  (earlier name of osCommerce)
+   (c) 2002-2003 osCommerce(order.php,v 1.32 2003/02/26); www.oscommerce.com 
+   (c) 2003	 nextcommerce (order.php,v 1.28 2003/08/18); www.nextcommerce.org
+
+   Released under the GNU General Public License
+   -----------------------------------------------------------------------------------------
+   Third Party contribution:
+
+   Credit Class/Gift Vouchers/Discount Coupons (Version 5.10)
+   http://www.oscommerce.com/community/contributions,282
+   Copyright (c) Strider | Strider@oscworks.com
+   Copyright (c  Nick Stanko of UkiDev.com, nick@ukidev.com
+   Copyright (c) Andre ambidex@gmx.net
+   Copyright (c) 2001,2002 Ian C Wilson http://www.phesis.org
+
+   credit card encryption functions for the catalog module
+   BMC 2003 for the CC CVV Module
+
+
+   Released under the GNU General Public License
+   ---------------------------------------------------------------------------------------*/
+
+  // include needed functions
+  require_once(DIR_FS_INC . 'xtc_date_long.inc.php');
+  require_once(DIR_FS_INC . 'xtc_address_format.inc.php');
+  require_once(DIR_FS_INC . 'xtc_get_country_name.inc.php');
+  require_once(DIR_FS_INC . 'xtc_get_zone_code.inc.php');
+  require_once(DIR_FS_INC . 'xtc_get_tax_description.inc.php');
+
+
+  class order {
+    var $info, $totals, $products, $customer, $delivery, $content_type;
+
+    function order($order_id = '') {
+    	global $xtPrice;
+      $this->info = array();
+      $this->totals = array();
+      $this->products = array();
+      $this->customer = array();
+      $this->delivery = array();
+
+
+      if (xtc_not_null($order_id)) {
+        $this->query($order_id);
+      } else {
+        $this->cart();
+      }
+    }
+
+    function query($order_id) {
+
+      $order_id = xtc_db_prepare_input($order_id);
+
+      $order_query = xtc_db_query("SELECT
+                                   *
+                                   FROM " . TABLE_ORDERS . " WHERE
+                                   orders_id = '" . xtc_db_input($order_id) . "'");
+
+      $order = xtc_db_fetch_array($order_query);
+
+      $totals_query = xtc_db_query("SELECT * FROM " . TABLE_ORDERS_TOTAL . " where orders_id = '" . xtc_db_input($order_id) . "' order by sort_order");
+      while ($totals = xtc_db_fetch_array($totals_query)) {
+        $this->totals[] = array('title' => $totals['title'],
+                                'text' =>$totals['text'],
+                                'value'=>$totals['value']);
+      }
+
+      $order_total_query = xtc_db_query("select text from " . TABLE_ORDERS_TOTAL . " where orders_id = '" . $order_id . "' and class = 'ot_total'");
+      $order_total = xtc_db_fetch_array($order_total_query);
+
+      $shipping_method_query = xtc_db_query("select title from " . TABLE_ORDERS_TOTAL . " where orders_id = '" . $order_id . "' and class = 'ot_shipping'");
+      $shipping_method = xtc_db_fetch_array($shipping_method_query);
+
+      $order_status_query = xtc_db_query("select orders_status_name from " . TABLE_ORDERS_STATUS . " where orders_status_id = '" . $order['orders_status'] . "' and language_id = '" . $_SESSION['languages_id'] . "'");
+      $order_status = xtc_db_fetch_array($order_status_query);
+
+      $this->info = array('currency' => $order['currency'],
+                          'currency_value' => $order['currency_value'],
+                          'payment_method' => $order['payment_method'],
+                          'cc_type' => $order['cc_type'],
+                          'cc_owner' => $order['cc_owner'],
+                          'cc_number' => $order['cc_number'],
+                          'cc_expires' => $order['cc_expires'],
+// BMC CC Mod Start
+                          'cc_start' => $order['cc_start'],
+                          'cc_issue' => $order['cc_issue'],
+                          'cc_cvv' => $order['cc_cvv'],
+// BMC CC Mod End
+                          'date_purchased' => $order['date_purchased'],
+                          'orders_status' => $order_status['orders_status_name'],
+                          'last_modified' => $order['last_modified'],
+                          'total' => strip_tags($order_total['text']),
+                          'shipping_method' => ((substr($shipping_method['title'], -1) == ':') ? substr(strip_tags($shipping_method['title']), 0, -1) : strip_tags($shipping_method['title'])),
+                          'comments' => $order['comments']
+                          );
+
+      $this->customer = array('id' => $order['customers_id'],
+                              'name' => $order['customers_name'],
+                              'firstname' => $order['customers_firstname'],
+                              'lastname' => $order['customers_lastname'],                            
+                              'csID' => $order['customers_cid'],
+                              'company' => $order['customers_company'],
+                              'street_address' => $order['customers_street_address'],
+                              'suburb' => $order['customers_suburb'],
+                              'city' => $order['customers_city'],
+                              'postcode' => $order['customers_postcode'],
+                              'state' => $order['customers_state'],
+                              'country' => $order['customers_country'],
+                              'format_id' => $order['customers_address_format_id'],
+                              'telephone' => $order['customers_telephone'],
+                              'email_address' => $order['customers_email_address']);
+
+      $this->delivery = array('name' => $order['delivery_name'],
+      							'firstname' => $order['delivery_firstname'],
+      							'lastname' => $order['delivery_lastname'],
+                              'company' => $order['delivery_company'],
+                              'street_address' => $order['delivery_street_address'],
+                              'suburb' => $order['delivery_suburb'],
+                              'city' => $order['delivery_city'],
+                              'postcode' => $order['delivery_postcode'],
+                              'state' => $order['delivery_state'],
+                              'country' => $order['delivery_country'],
+                              'format_id' => $order['delivery_address_format_id']);
+
+      if (empty($this->delivery['name']) && empty($this->delivery['street_address'])) {
+        $this->delivery = false;
+      }
+
+      $this->billing = array('name' => $order['billing_name'],
+      							'firstname' => $order['billing_firstname'],
+      							'lastname' => $order['billing_lastname'],
+                             'company' => $order['billing_company'],
+                             'street_address' => $order['billing_street_address'],
+                             'suburb' => $order['billing_suburb'],
+                             'city' => $order['billing_city'],
+                             'postcode' => $order['billing_postcode'],
+                             'state' => $order['billing_state'],
+                             'country' => $order['billing_country'],
+                             'format_id' => $order['billing_address_format_id']);
+
+      $index = 0;
+      $orders_products_query = xtc_db_query("SELECT * FROM " . TABLE_ORDERS_PRODUCTS . " where orders_id = '" . xtc_db_input($order_id) . "'");
+      while ($orders_products = xtc_db_fetch_array($orders_products_query)) {
+        $this->products[$index] = array('qty' => $orders_products['products_quantity'],
+	                                	'id' => $orders_products['products_id'],
+                                        'name' => $orders_products['products_name'],
+                                        'model' => $orders_products['products_model'],
+                                        'tax' => $orders_products['products_tax'],
+					                    'price'=>$orders_products['products_price'],
+					                    'shipping_time'=>$orders_products['products_shipping_time'],
+                                        'final_price' => $orders_products['final_price']);
+
+        $subindex = 0;
+        $attributes_query = xtc_db_query("SELECT * FROM " . TABLE_ORDERS_PRODUCTS_ATTRIBUTES . " where orders_id = '" . xtc_db_input($order_id) . "' and orders_products_id = '" . $orders_products['orders_products_id'] . "'");
+        if (xtc_db_num_rows($attributes_query)) {
+          while ($attributes = xtc_db_fetch_array($attributes_query)) {
+            $this->products[$index]['attributes'][$subindex] = array('option' => $attributes['products_options'],
+                                                                     'value' => $attributes['products_options_values'],
+                                                                     'prefix' => $attributes['price_prefix'],
+                                                                     'price' => $attributes['options_values_price']);
+
+            $subindex++;
+          }
+        }
+
+        $this->info['tax_groups']["{$this->products[$index]['tax']}"] = '1';
+
+        $index++;
+      }
+    }
+    
+        function getOrderData($oID) {
+    	global $xtPrice;
+    	
+    	require_once(DIR_FS_INC . 'xtc_get_attributes_model.inc.php');
+    	
+    	$order_query = "SELECT
+	        				products_id,
+	        				orders_products_id,
+	        				products_model,
+	        				products_name,
+	        				final_price,
+	        			  	products_shipping_time,
+	        				products_quantity
+	        				FROM ".TABLE_ORDERS_PRODUCTS."
+	        				WHERE orders_id='".(int) $oID."'";
+	$order_data = array ();
+	$order_query = xtc_db_query($order_query);
+	while ($order_data_values = xtc_db_fetch_array($order_query)) {
+		$attributes_query = "SELECT
+		        				products_options,
+		        				products_options_values,
+		        				price_prefix,
+		        				options_values_price
+		        				FROM ".TABLE_ORDERS_PRODUCTS_ATTRIBUTES."
+		        				WHERE orders_products_id='".$order_data_values['orders_products_id']."'";
+		$attributes_data = '';
+		$attributes_model = '';
+		$attributes_query = xtc_db_query($attributes_query);
+		while ($attributes_data_values = xtc_db_fetch_array($attributes_query)) {
+			$attributes_data .= '<br />'.$attributes_data_values['products_options'].':'.$attributes_data_values['products_options_values'];
+			$attributes_model .= '<br />'.xtc_get_attributes_model($order_data_values['products_id'], $attributes_data_values['products_options_values'],$attributes_data_values['products_options']);
+
+		}
+		$order_data[] = array ('PRODUCTS_MODEL' => $order_data_values['products_model'], 'PRODUCTS_NAME' => $order_data_values['products_name'],'PRODUCTS_SHIPPING_TIME' => $order_data_values['products_shipping_time'], 'PRODUCTS_ATTRIBUTES' => $attributes_data, 'PRODUCTS_ATTRIBUTES_MODEL' => $attributes_model, 'PRODUCTS_PRICE' => $xtPrice->xtcFormat($order_data_values['final_price'], true),'PRODUCTS_SINGLE_PRICE' => $xtPrice->xtcFormat($order_data_values['final_price']/$order_data_values['products_quantity'], true), 'PRODUCTS_QTY' => $order_data_values['products_quantity']);
+
+	}
+	
+	return $order_data;
+    	
+    }
+    
+    function getTotalData($oID) {
+    	global $xtPrice,$db;
+    	
+    		// get order_total data
+	$oder_total_query = "SELECT
+	  					title,
+	  					text,
+	                    class,
+	                    value,
+	  					sort_order
+	  					FROM ".TABLE_ORDERS_TOTAL."
+	  					WHERE orders_id='".(int) $oID."'
+	  					ORDER BY sort_order ASC";
+
+	$order_total = array ();
+	$oder_total_query = xtc_db_query($oder_total_query);
+	while ($oder_total_values = xtc_db_fetch_array($oder_total_query)) {
+
+
+		$order_total[] = array ('TITLE' => $oder_total_values['title'], 'CLASS' => $oder_total_values['class'], 'VALUE' => $oder_total_values['value'], 'TEXT' => $oder_total_values['text']);
+		if ($oder_total_values['class'] = 'ot_total')
+			$total = $oder_total_values['value'];
+
+	}
+	
+	return array('data'=>$order_total,'total'=>$total);
+	
+    }
+
+    function cart() {
+      global $currencies,$xtPrice;
+
+      $this->content_type = $_SESSION['cart']->get_content_type();
+
+      $customer_address_query = xtc_db_query("select c.payment_unallowed,c.shipping_unallowed,c.customers_firstname,c.customers_cid, c.customers_gender,c.customers_lastname, c.customers_telephone, c.customers_email_address, ab.entry_company, ab.entry_street_address, ab.entry_suburb, ab.entry_postcode, ab.entry_city, ab.entry_zone_id, z.zone_name, co.countries_id, co.countries_name, co.countries_iso_code_2, co.countries_iso_code_3, co.address_format_id, ab.entry_state from " . TABLE_CUSTOMERS . " c, " . TABLE_ADDRESS_BOOK . " ab left join " . TABLE_ZONES . " z on (ab.entry_zone_id = z.zone_id) left join " . TABLE_COUNTRIES . " co on (ab.entry_country_id = co.countries_id) where c.customers_id = '" . $_SESSION['customer_id'] . "' and ab.customers_id = '" . $_SESSION['customer_id'] . "' and c.customers_default_address_id = ab.address_book_id");
+      $customer_address = xtc_db_fetch_array($customer_address_query);
+
+      $shipping_address_query = xtc_db_query("select ab.entry_firstname, ab.entry_lastname, ab.entry_company, ab.entry_street_address, ab.entry_suburb, ab.entry_postcode, ab.entry_city, ab.entry_zone_id, z.zone_name, ab.entry_country_id, c.countries_id, c.countries_name, c.countries_iso_code_2, c.countries_iso_code_3, c.address_format_id, ab.entry_state from " . TABLE_ADDRESS_BOOK . " ab left join " . TABLE_ZONES . " z on (ab.entry_zone_id = z.zone_id) left join " . TABLE_COUNTRIES . " c on (ab.entry_country_id = c.countries_id) where ab.customers_id = '" . $_SESSION['customer_id'] . "' and ab.address_book_id = '" . $_SESSION['sendto'] . "'");
+      $shipping_address = xtc_db_fetch_array($shipping_address_query);
+      
+      $billing_address_query = xtc_db_query("select ab.entry_firstname, ab.entry_lastname, ab.entry_company, ab.entry_street_address, ab.entry_suburb, ab.entry_postcode, ab.entry_city, ab.entry_zone_id, z.zone_name, ab.entry_country_id, c.countries_id, c.countries_name, c.countries_iso_code_2, c.countries_iso_code_3, c.address_format_id, ab.entry_state from " . TABLE_ADDRESS_BOOK . " ab left join " . TABLE_ZONES . " z on (ab.entry_zone_id = z.zone_id) left join " . TABLE_COUNTRIES . " c on (ab.entry_country_id = c.countries_id) where ab.customers_id = '" . $_SESSION['customer_id'] . "' and ab.address_book_id = '" . $_SESSION['billto'] . "'");
+      $billing_address = xtc_db_fetch_array($billing_address_query);
+
+      $tax_address_query = xtc_db_query("select ab.entry_country_id, ab.entry_zone_id from " . TABLE_ADDRESS_BOOK . " ab left join " . TABLE_ZONES . " z on (ab.entry_zone_id = z.zone_id) where ab.customers_id = '" . $_SESSION['customer_id'] . "' and ab.address_book_id = '" . ($this->content_type == 'virtual' ? $_SESSION['billto'] : $_SESSION['sendto']) . "'");
+      $tax_address = xtc_db_fetch_array($tax_address_query);
+
+      $this->info = array('order_status' => DEFAULT_ORDERS_STATUS_ID,
+                          'currency' => $_SESSION['currency'],
+                          'currency_value' => $xtPrice->currencies[$_SESSION['currency']]['value'],
+                          'payment_method' => $_SESSION['payment'],
+                          'cc_type' => (isset($_SESSION['payment'])=='cc' && isset($_SESSION['ccard']['cc_type']) ? $_SESSION['ccard']['cc_type'] : ''),
+                          'cc_owner'=>(isset($_SESSION['payment'])=='cc' && isset($_SESSION['ccard']['cc_owner']) ? $_SESSION['ccard']['cc_owner'] : ''),
+                          'cc_number' => (isset($_SESSION['payment'])=='cc' && isset($_SESSION['ccard']['cc_number']) ? $_SESSION['ccard']['cc_number'] : ''),
+                          'cc_expires' => (isset($_SESSION['payment'])=='cc' && isset($_SESSION['ccard']['cc_expires']) ? $_SESSION['ccard']['cc_expires'] : ''),
+                          'cc_start' => (isset($_SESSION['payment'])=='cc' && isset($_SESSION['ccard']['cc_start']) ? $_SESSION['ccard']['cc_start'] : ''),
+                          'cc_issue' => (isset($_SESSION['payment'])=='cc' && isset($_SESSION['ccard']['cc_issue']) ? $_SESSION['ccard']['cc_issue'] : ''),
+                          'cc_cvv' => (isset($_SESSION['payment'])=='cc' && isset($_SESSION['ccard']['cc_cvv']) ? $_SESSION['ccard']['cc_cvv'] : ''),
+                          'shipping_method' => $_SESSION['shipping']['title'],
+                          'shipping_cost' => $_SESSION['shipping']['cost'],
+                          'comments' => $_SESSION['comments'],
+                          'shipping_class'=>$_SESSION['shipping']['id'],
+                          'payment_class' => $_SESSION['payment'],
+                          );
+
+      if (isset($_SESSION['payment']) && is_object($_SESSION['payment'])) {
+        $this->info['payment_method'] = $_SESSION['payment']->title;
+        $this->info['payment_class'] = $_SESSION['payment']->title;
+        if ( isset($_SESSION['payment']->order_status) && is_numeric($_SESSION['payment']->order_status) && ($_SESSION['payment']->order_status > 0) ) {
+          $this->info['order_status'] = $_SESSION['payment']->order_status;
+        }
+      }
+
+      $this->customer = array('firstname' => $customer_address['customers_firstname'],
+                              'lastname' => $customer_address['customers_lastname'],
+                              'csID' => $customer_address['customers_cid'],
+                              'gender' => $customer_address['customers_gender'],
+                              'company' => $customer_address['entry_company'],
+                              'street_address' => $customer_address['entry_street_address'],
+                              'suburb' => $customer_address['entry_suburb'],
+                              'city' => $customer_address['entry_city'],
+                              'postcode' => $customer_address['entry_postcode'],
+                              'state' => ((xtc_not_null($customer_address['entry_state'])) ? $customer_address['entry_state'] : $customer_address['zone_name']),
+                              'zone_id' => $customer_address['entry_zone_id'],
+                              'country' => array('id' => $customer_address['countries_id'], 'title' => $customer_address['countries_name'], 'iso_code_2' => $customer_address['countries_iso_code_2'], 'iso_code_3' => $customer_address['countries_iso_code_3']),
+                              'format_id' => $customer_address['address_format_id'],
+                              'telephone' => $customer_address['customers_telephone'],
+                              'payment_unallowed' => $customer_address['payment_unallowed'],
+                              'shipping_unallowed' => $customer_address['shipping_unallowed'],
+                              'email_address' => $customer_address['customers_email_address']);
+
+      $this->delivery = array('firstname' => $shipping_address['entry_firstname'],
+                              'lastname' => $shipping_address['entry_lastname'],
+                              'company' => $shipping_address['entry_company'],
+                              'street_address' => $shipping_address['entry_street_address'],
+                              'suburb' => $shipping_address['entry_suburb'],
+                              'city' => $shipping_address['entry_city'],
+                              'postcode' => $shipping_address['entry_postcode'],
+                              'state' => ((xtc_not_null($shipping_address['entry_state'])) ? $shipping_address['entry_state'] : $shipping_address['zone_name']),
+                              'zone_id' => $shipping_address['entry_zone_id'],
+                              'country' => array('id' => $shipping_address['countries_id'], 'title' => $shipping_address['countries_name'], 'iso_code_2' => $shipping_address['countries_iso_code_2'], 'iso_code_3' => $shipping_address['countries_iso_code_3']),
+                              'country_id' => $shipping_address['entry_country_id'],
+                              'format_id' => $shipping_address['address_format_id']);
+
+      $this->billing = array('firstname' => $billing_address['entry_firstname'],
+                             'lastname' => $billing_address['entry_lastname'],
+                             'company' => $billing_address['entry_company'],
+                             'street_address' => $billing_address['entry_street_address'],
+                             'suburb' => $billing_address['entry_suburb'],
+                             'city' => $billing_address['entry_city'],
+                             'postcode' => $billing_address['entry_postcode'],
+                             'state' => ((xtc_not_null($billing_address['entry_state'])) ? $billing_address['entry_state'] : $billing_address['zone_name']),
+                             'zone_id' => $billing_address['entry_zone_id'],
+                             'country' => array('id' => $billing_address['countries_id'], 'title' => $billing_address['countries_name'], 'iso_code_2' => $billing_address['countries_iso_code_2'], 'iso_code_3' => $billing_address['countries_iso_code_3']),
+                             'country_id' => $billing_address['entry_country_id'],
+                             'format_id' => $billing_address['address_format_id']);
+
+      $index = 0;
+      $products = $_SESSION['cart']->get_products();
+      for ($i=0, $n=sizeof($products); $i<$n; $i++) {
+
+        $products_price=$xtPrice->xtcGetPrice($products[$i]['id'],
+                                        $format=false,
+                                        $products[$i]['quantity'],
+                                        $products[$i]['tax_class_id'],
+                                        '')+$xtPrice->xtcFormat($_SESSION['cart']->attributes_price($products[$i]['id']),false);
+
+        $this->products[$index] = array('qty' => $products[$i]['quantity'],
+                                        'name' => $products[$i]['name'],
+                                        'model' => $products[$i]['model'],
+                                        'tax_class_id'=> $products[$i]['tax_class_id'],
+                                        'tax' => xtc_get_tax_rate($products[$i]['tax_class_id'], $tax_address['entry_country_id'], $tax_address['entry_zone_id']),
+                                        'tax_description' => xtc_get_tax_description($products[$i]['tax_class_id'], $tax_address['entry_country_id'], $tax_address['entry_zone_id']),
+                                        'price' =>  $products_price ,
+                            		    'final_price' => $products_price*$products[$i]['quantity'],
+                            		    'shipping_time'=>$products[$i]['shipping_time'],
+					                    'weight' => $products[$i]['weight'],
+                                        'width' => $products[$i]['width'],
+                                        'height' => $products[$i]['height'],
+                                        'length' => $products[$i]['length'],
+                                        'id' => $products[$i]['id']);
+
+        if ($products[$i]['attributes']) {
+          $subindex = 0;
+          reset($products[$i]['attributes']);
+          while (list($option, $value) = each($products[$i]['attributes'])) {
+            $attributes_query = xtc_db_query("select popt.products_options_name, poval.products_options_values_name, pa.options_values_price, pa.price_prefix from " . TABLE_PRODUCTS_OPTIONS . " popt, " . TABLE_PRODUCTS_OPTIONS_VALUES . " poval, " . TABLE_PRODUCTS_ATTRIBUTES . " pa where pa.products_id = '" . $products[$i]['id'] . "' and pa.options_id = '" . $option . "' and pa.options_id = popt.products_options_id and pa.options_values_id = '" . $value . "' and pa.options_values_id = poval.products_options_values_id and popt.language_id = '" . $_SESSION['languages_id'] . "' and poval.language_id = '" . $_SESSION['languages_id'] . "'");
+            $attributes = xtc_db_fetch_array($attributes_query);
+
+            $this->products[$index]['attributes'][$subindex] = array('option' => $attributes['products_options_name'],
+                                                                     'value' => $attributes['products_options_values_name'],
+                                                                     'option_id' => $option,
+                                                                     'value_id' => $value,
+                                                                     'prefix' => $attributes['price_prefix'],
+                                                                     'price' => $attributes['options_values_price']);
+
+            $subindex++;
+          }
+        }
+
+        $shown_price = $this->products[$index]['final_price'];
+        $this->info['subtotal'] += $shown_price;
+        if ($_SESSION['customers_status']['customers_status_ot_discount_flag'] == 1){
+          $shown_price_tax = $shown_price-($shown_price/100 * $_SESSION['customers_status']['customers_status_ot_discount']);
+        }
+
+        $products_tax = $this->products[$index]['tax'];
+        $products_tax_description = $this->products[$index]['tax_description'];
+        if ($_SESSION['customers_status']['customers_status_show_price_tax'] == '1') {
+          if ($_SESSION['customers_status']['customers_status_ot_discount_flag'] == 1) {
+            $this->info['tax'] += $shown_price_tax - ($shown_price_tax / (($products_tax < 10) ? "1.0" . str_replace('.', '', $products_tax) : "1." . str_replace('.', '', $products_tax)));
+            $this->info['tax_groups'][TAX_ADD_TAX."$products_tax_description"] += (($shown_price_tax /(100+$products_tax)) * $products_tax);
+          } else {
+            $this->info['tax'] += $shown_price - ($shown_price / (($products_tax < 10) ? "1.0" . str_replace('.', '', $products_tax) : "1." . str_replace('.', '', $products_tax)));
+            $this->info['tax_groups'][TAX_ADD_TAX . "$products_tax_description"] += (($shown_price /(100+$products_tax)) * $products_tax);
+          }
+        } else {
+          if ($_SESSION['customers_status']['customers_status_ot_discount_flag'] == 1) {
+            $this->info['tax'] += ($shown_price_tax/100) * ($products_tax);
+            $this->info['tax_groups'][TAX_NO_TAX . "$products_tax_description"] += ($shown_price_tax/100) * ($products_tax);
+          } else {
+            $this->info['tax'] += ($shown_price/100) * ($products_tax);
+            $this->info['tax_groups'][TAX_NO_TAX . "$products_tax_description"] += ($shown_price/100) * ($products_tax);
+          }
+        }
+        $index++;
+      }
+
+ //$this->info['shipping_cost']=0;
+      if ($_SESSION['customers_status']['customers_status_show_price_tax'] == '0') {
+        $this->info['total'] = $this->info['subtotal']  + $xtPrice->xtcFormat($this->info['shipping_cost'], false,0,true);
+        if ($_SESSION['customers_status']['customers_status_ot_discount_flag'] == '1') {
+          $this->info['total'] -= ($this->info['subtotal'] /100 * $_SESSION['customers_status']['customers_status_ot_discount']);
+        }
+      } else {
+		
+        $this->info['total'] = $this->info['subtotal']  + $xtPrice->xtcFormat($this->info['shipping_cost'],false,0,true);
+        if ($_SESSION['customers_status']['customers_status_ot_discount_flag'] == '1') {
+          $this->info['total'] -= ($this->info['subtotal'] /100 * $_SESSION['customers_status']['customers_status_ot_discount']);
+        }
+      }
+
+    }
+
+  }
 ?>
\ No newline at end of file
diff --git a/includes/classes/shopping_cart.php b/includes/classes/shopping_cart.php
index 973f6e7..65bae92 100644
--- a/includes/classes/shopping_cart.php
+++ b/includes/classes/shopping_cart.php
@@ -1,483 +1,483 @@
-<?php
-
-/* -----------------------------------------------------------------------------------------
-   $Id: shopping_cart.php 1534 2006-08-20 19:39:22Z mz $
-
-   XT-Commerce - community made shopping
-   http://www.xt-commerce.com
-
-   Copyright (c) 2003 XT-Commerce
-   -----------------------------------------------------------------------------------------
-   based on: 
-   (c) 2000-2001 The Exchange Project  (earlier name of osCommerce)
-   (c) 2002-2003 osCommerce(shopping_cart.php,v 1.32 2003/02/11); www.oscommerce.com
-   (c) 2003	 nextcommerce (shopping_cart.php,v 1.21 2003/08/17); www.nextcommerce.org
-
-   Released under the GNU General Public License
-   -----------------------------------------------------------------------------------------
-   Third Party contributions:
-
-   Customers Status v3.x  (c) 2002-2003 Copyright Elari elari@free.fr | www.unlockgsm.com/dload-osc/ | CVS : http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/elari/?sortby=date#dirlist
-
-   Credit Class/Gift Vouchers/Discount Coupons (Version 5.10)
-   http://www.oscommerce.com/community/contributions,282
-   Copyright (c) Strider | Strider@oscworks.com
-   Copyright (c  Nick Stanko of UkiDev.com, nick@ukidev.com
-   Copyright (c) Andre ambidex@gmx.net
-   Copyright (c) 2001,2002 Ian C Wilson http://www.phesis.org
-
-   Released under the GNU General Public License
-   ---------------------------------------------------------------------------------------*/
-
-// include needed functions
-require_once (DIR_FS_INC.'xtc_create_random_value.inc.php');
-require_once (DIR_FS_INC.'xtc_get_prid.inc.php');
-require_once (DIR_FS_INC.'xtc_draw_form.inc.php');
-require_once (DIR_FS_INC.'xtc_draw_input_field.inc.php');
-require_once (DIR_FS_INC.'xtc_image_submit.inc.php');
-require_once (DIR_FS_INC.'xtc_get_tax_description.inc.php');
-
-class shoppingCart {
-	var $contents, $total, $weight, $cartID, $content_type;
-
-	function shoppingCart() {
-		$this->reset();
-
-	}
-
-	function restore_contents() {
-
-		if (!isset ($_SESSION['customer_id']))
-			return false;
-
-		// insert current cart contents in database
-		if (is_array($this->contents)) {
-			reset($this->contents);
-			while (list ($products_id,) = each($this->contents)) {
-				$qty = $this->contents[$products_id]['qty'];
-				$product_query = xtc_db_query("select products_id from ".TABLE_CUSTOMERS_BASKET." where customers_id = '".$_SESSION['customer_id']."' and products_id = '".$products_id."'");
-				if (!xtc_db_num_rows($product_query)) {
-					xtc_db_query("insert into ".TABLE_CUSTOMERS_BASKET." (customers_id, products_id, customers_basket_quantity, customers_basket_date_added) values ('".$_SESSION['customer_id']."', '".$products_id."', '".$qty."', '".date('Ymd')."')");
-					if (isset ($this->contents[$products_id]['attributes'])) {
-						reset($this->contents[$products_id]['attributes']);
-						while (list ($option, $value) = each($this->contents[$products_id]['attributes'])) {
-							xtc_db_query("insert into ".TABLE_CUSTOMERS_BASKET_ATTRIBUTES." (customers_id, products_id, products_options_id, products_options_value_id) values ('".$_SESSION['customer_id']."', '".$products_id."', '".$option."', '".$value."')");
-						}
-					}
-				} else {
-					xtc_db_query("update ".TABLE_CUSTOMERS_BASKET." set customers_basket_quantity = '".$qty."' where customers_id = '".$_SESSION['customer_id']."' and products_id = '".$products_id."'");
-				}
-			}
-		}
-
-		// reset per-session cart contents, but not the database contents
-		$this->reset(false);
-
-		$products_query = xtc_db_query("select products_id, customers_basket_quantity from ".TABLE_CUSTOMERS_BASKET." where customers_id = '".$_SESSION['customer_id']."'");
-		while ($products = xtc_db_fetch_array($products_query)) {
-			$this->contents[$products['products_id']] = array ('qty' => $products['customers_basket_quantity']);
-			// attributes
-			$attributes_query = xtc_db_query("select products_options_id, products_options_value_id from ".TABLE_CUSTOMERS_BASKET_ATTRIBUTES." where customers_id = '".$_SESSION['customer_id']."' and products_id = '".$products['products_id']."'");
-			while ($attributes = xtc_db_fetch_array($attributes_query)) {
-				$this->contents[$products['products_id']]['attributes'][$attributes['products_options_id']] = $attributes['products_options_value_id'];
-			}
-		}
-
-		$this->cleanup();
-	}
-
-	function reset($reset_database = false) {
-
-		$this->contents = array ();
-		$this->total = 0;
-		$this->weight = 0;
-		$this->content_type = false;
-
-		if (isset ($_SESSION['customer_id']) && ($reset_database == true)) {
-			xtc_db_query("delete from ".TABLE_CUSTOMERS_BASKET." where customers_id = '".$_SESSION['customer_id']."'");
-			xtc_db_query("delete from ".TABLE_CUSTOMERS_BASKET_ATTRIBUTES." where customers_id = '".$_SESSION['customer_id']."'");
-		}
-
-		unset ($this->cartID);
-		if (isset ($_SESSION['cartID']))
-			unset ($_SESSION['cartID']);
-	}
-
-	function add_cart($products_id, $qty = '1', $attributes = '', $notify = true) {
-		global $new_products_id_in_cart;
-
-		$products_id = xtc_get_uprid($products_id, $attributes);
-		if ($notify == true) {
-			$_SESSION['new_products_id_in_cart'] = $products_id;
-		}
-
-		if ($this->in_cart($products_id)) {
-			$this->update_quantity($products_id, $qty, $attributes);
-		} else {
-			$this->contents[] = array ($products_id);
-			$this->contents[$products_id] = array ('qty' => $qty);
-			// insert into database
-			if (isset ($_SESSION['customer_id']))
-				xtc_db_query("insert into ".TABLE_CUSTOMERS_BASKET." (customers_id, products_id, customers_basket_quantity, customers_basket_date_added) values ('".$_SESSION['customer_id']."', '".$products_id."', '".$qty."', '".date('Ymd')."')");
-
-			if (is_array($attributes)) {
-				reset($attributes);
-				while (list ($option, $value) = each($attributes)) {
-					$this->contents[$products_id]['attributes'][$option] = $value;
-					// insert into database
-					if (isset ($_SESSION['customer_id']))
-						xtc_db_query("insert into ".TABLE_CUSTOMERS_BASKET_ATTRIBUTES." (customers_id, products_id, products_options_id, products_options_value_id) values ('".$_SESSION['customer_id']."', '".$products_id."', '".$option."', '".$value."')");
-				}
-			}
-		}
-		$this->cleanup();
-
-		// assign a temporary unique ID to the order contents to prevent hack attempts during the checkout procedure
-		$this->cartID = $this->generate_cart_id();
-	}
-
-	function update_quantity($products_id, $quantity = '', $attributes = '') {
-
-		if (empty ($quantity))
-			return true; // nothing needs to be updated if theres no quantity, so we return true..
-
-		$this->contents[$products_id] = array ('qty' => $quantity);
-		// update database
-		if (isset ($_SESSION['customer_id']))
-			xtc_db_query("update ".TABLE_CUSTOMERS_BASKET." set customers_basket_quantity = '".$quantity."' where customers_id = '".$_SESSION['customer_id']."' and products_id = '".$products_id."'");
-
-		if (is_array($attributes)) {
-			reset($attributes);
-			while (list ($option, $value) = each($attributes)) {
-				$this->contents[$products_id]['attributes'][$option] = $value;
-				// update database
-				if (isset ($_SESSION['customer_id']))
-					xtc_db_query("update ".TABLE_CUSTOMERS_BASKET_ATTRIBUTES." set products_options_value_id = '".$value."' where customers_id = '".$_SESSION['customer_id']."' and products_id = '".$products_id."' and products_options_id = '".$option."'");
-			}
-		}
-	}
-
-	function cleanup() {
-
-		reset($this->contents);
-		while (list ($key,) = each($this->contents)) {
-			if ($this->contents[$key]['qty'] < 1) {
-				unset ($this->contents[$key]);
-				// remove from database
-				if (xtc_session_is_registered('customer_id')) {
-					xtc_db_query("delete from ".TABLE_CUSTOMERS_BASKET." where customers_id = '".$_SESSION['customer_id']."' and products_id = '".$key."'");
-					xtc_db_query("delete from ".TABLE_CUSTOMERS_BASKET_ATTRIBUTES." where customers_id = '".$_SESSION['customer_id']."' and products_id = '".$key."'");
-				}
-			}
-		}
-	}
-
-	function count_contents() { // get total number of items in cart 
-		$total_items = 0;
-		if (is_array($this->contents)) {
-			reset($this->contents);
-			while (list ($products_id,) = each($this->contents)) {
-				$total_items += $this->get_quantity($products_id);
-			}
-		}
-
-		return $total_items;
-	}
-
-	function get_quantity($products_id) {
-		if (isset ($this->contents[$products_id])) {
-			return $this->contents[$products_id]['qty'];
-		} else {
-			return 0;
-		}
-	}
-
-	function in_cart($products_id) {
-		if (isset ($this->contents[$products_id])) {
-			return true;
-		} else {
-			return false;
-		}
-	}
-
-	function remove($products_id) {
-		
-		$this->contents[$products_id]= NULL;
-		// remove from database
-		if (xtc_session_is_registered('customer_id')) {
-			xtc_db_query("delete from ".TABLE_CUSTOMERS_BASKET." where customers_id = '".$_SESSION['customer_id']."' and products_id = '".$products_id."'");
-			xtc_db_query("delete from ".TABLE_CUSTOMERS_BASKET_ATTRIBUTES." where customers_id = '".$_SESSION['customer_id']."' and products_id = '".$products_id."'");
-		}
-
-		// assign a temporary unique ID to the order contents to prevent hack attempts during the checkout procedure
-		$this->cartID = $this->generate_cart_id();
-	}
-
-	function remove_all() {
-		$this->reset();
-	}
-
-	function get_product_id_list() {
-		$product_id_list = '';
-		if (is_array($this->contents)) {
-			reset($this->contents);
-			while (list ($products_id,) = each($this->contents)) {
-				$product_id_list .= ', '.$products_id;
-			}
-		}
-
-		return substr($product_id_list, 2);
-	}
-
-	function calculate() {
-		global $xtPrice;
-		$this->total = 0;
-		$this->weight = 0;
-		$this->tax = array ();
-		if (!is_array($this->contents))
-			return 0;
-
-		reset($this->contents);
-		while (list ($products_id,) = each($this->contents)) {
-			$qty = $this->contents[$products_id]['qty'];
-
-			// products price
-			$product_query = xtc_db_query("select products_id, products_price, products_discount_allowed, products_tax_class_id, products_weight from ".TABLE_PRODUCTS." where products_id='".xtc_get_prid($products_id)."'");
-			if ($product = xtc_db_fetch_array($product_query)) {
-
-				$products_price = $xtPrice->xtcGetPrice($product['products_id'], $format = false, $qty, $product['products_tax_class_id'], $product['products_price']);
-				$this->total += $products_price * $qty;
-				$this->weight += ($qty * $product['products_weight']);
-				
-				
-							// attributes price
-				$attribute_price = 0;
-			if (isset ($this->contents[$products_id]['attributes'])) {
-				reset($this->contents[$products_id]['attributes']);
-				while (list ($option, $value) = each($this->contents[$products_id]['attributes'])) {
-
-					$values = $xtPrice->xtcGetOptionPrice($product['products_id'], $option, $value);
-					$this->weight += $values['weight'] * $qty;
-					$this->total += $values['price'] * $qty;
-					$attribute_price+=$values['price'];
-				}
-			}
-				
-				
-				
-				if ($product['products_tax_class_id'] != 0) {
-					
-					if ($_SESSION['customers_status']['customers_status_ot_discount_flag'] == 1) {
-						$products_price_tax = $products_price - ($products_price / 100 * $_SESSION['customers_status']['customers_status_ot_discount']);
-						$attribute_price_tax = $attribute_price - ($attribute_price / 100 * $_SESSION['customers_status']['customers_status_ot_discount']);
-					}
-						
-						
-					$products_tax = $xtPrice->TAX[$product['products_tax_class_id']];
-					$products_tax_description = xtc_get_tax_description($product['products_tax_class_id']);
-
-					
-					// price incl tax
-					if ($_SESSION['customers_status']['customers_status_show_price_tax'] == '1') {
-						if ($_SESSION['customers_status']['customers_status_ot_discount_flag'] == 1) {
-							$this->tax[$product['products_tax_class_id']]['value'] += ((($products_price_tax+$attribute_price_tax) / (100 + $products_tax)) * $products_tax)*$qty;
-							$this->tax[$product['products_tax_class_id']]['desc'] = TAX_ADD_TAX."$products_tax_description";
-						} else {
-							$this->tax[$product['products_tax_class_id']]['value'] += ((($products_price+$attribute_price) / (100 + $products_tax)) * $products_tax)*$qty;
-							$this->tax[$product['products_tax_class_id']]['desc'] = TAX_ADD_TAX."$products_tax_description";
-						}
-						
-					}
-					// excl tax + tax at checkout
-					if ($_SESSION['customers_status']['customers_status_show_price_tax'] == 0 && $_SESSION['customers_status']['customers_status_add_tax_ot'] == 1) {
-						if ($_SESSION['customers_status']['customers_status_ot_discount_flag'] == 1) {
-							$this->tax[$product['products_tax_class_id']]['value'] += (($products_price_tax+$attribute_price_tax) / 100) * ($products_tax)*$qty;
-							$this->total+=(($products_price_tax+$attribute_price_tax) / 100) * ($products_tax)*$qty;
-							$this->tax[$product['products_tax_class_id']]['desc'] = TAX_NO_TAX."$products_tax_description";
-						} else {
-							$this->tax[$product['products_tax_class_id']]['value'] += (($products_price+$attribute_price) / 100) * ($products_tax)*$qty;
-							$this->total+= (($products_price+$attribute_price) / 100) * ($products_tax)*$qty;
-							$this->tax[$product['products_tax_class_id']]['desc'] = TAX_NO_TAX."$products_tax_description";
-						}
-					}				
-				}
-			}
-
-		}
-//		echo 'total_VOR'.$this->total;
-		if ($_SESSION['customers_status']['customers_status_ot_discount_flag'] != 0) {
-//			$this->total -= $this->total / 100 * $_SESSION['customers_status']['customers_status_ot_discount'];
-		}
-//		echo 'total_NACH'.$this->total;
-
-	}
-
-	function attributes_price($products_id) {
-		global $xtPrice;
-		if (isset ($this->contents[$products_id]['attributes'])) {
-			reset($this->contents[$products_id]['attributes']);
-			while (list ($option, $value) = each($this->contents[$products_id]['attributes'])) {
-
-				$values = $xtPrice->xtcGetOptionPrice($products_id, $option, $value);
-				$attributes_price += $values['price'];
-
-			}
-		}
-		return $attributes_price;
-	}
-
-	function get_products() {
-		global $xtPrice,$main;
-		if (!is_array($this->contents))
-			return false;
-
-		$products_array = array ();
-		reset($this->contents);
-		while (list ($products_id,) = each($this->contents)) {
-			if($this->contents[$products_id]['qty'] != 0 || $this->contents[$products_id]['qty'] !=''){			
-			$products_query = xtc_db_query("select p.products_id, pd.products_name,p.products_shippingtime, p.products_image, p.products_model, p.products_price, p.products_discount_allowed, p.products_weight, p.products_tax_class_id from ".TABLE_PRODUCTS." p, ".TABLE_PRODUCTS_DESCRIPTION." pd where p.products_id='".xtc_get_prid($products_id)."' and pd.products_id = p.products_id and pd.language_id = '".$_SESSION['languages_id']."'");
-			if ($products = xtc_db_fetch_array($products_query)) {
-				$prid = $products['products_id'];
-
-				$products_price = $xtPrice->xtcGetPrice($products['products_id'], $format = false, $this->contents[$products_id]['qty'], $products['products_tax_class_id'], $products['products_price']);
-
-				$products_array[] = array ('id' => $products_id, 'name' => $products['products_name'], 'model' => $products['products_model'], 'image' => $products['products_image'], 'price' => $products_price + $this->attributes_price($products_id), 'quantity' => $this->contents[$products_id]['qty'], 'weight' => $products['products_weight'],'shipping_time' => $main->getShippingStatusName($products['products_shippingtime']), 'final_price' => ($products_price + $this->attributes_price($products_id)), 'tax_class_id' => $products['products_tax_class_id'], 'attributes' => $this->contents[$products_id]['attributes']);
-			}
-			}
-		}
-
-		return $products_array;
-	}
-
-	function show_total() {
-		$this->calculate();
-
-		return $this->total;
-	}
-
-	function show_weight() {
-		$this->calculate();
-
-		return $this->weight;
-	}
-
-	function show_tax($format = true) {
-		global $xtPrice;
-		$this->calculate();
-		$output = "";
-		$val=0;
-		foreach ($this->tax as $key => $value) {
-			if ($this->tax[$key]['value'] > 0 ) {
-			$output .= $this->tax[$key]['desc'].": ".$xtPrice->xtcFormat($this->tax[$key]['value'], true)."<br />";
-			$val = $this->tax[$key]['value'];
-			}
-		}
-		if ($format) {
-		return $output;
-		} else {
-			return $val;
-		}
-	}
-
-	function generate_cart_id($length = 5) {
-		return xtc_create_random_value($length, 'digits');
-	}
-
-	function get_content_type() {
-		$this->content_type = false;
-
-		if ((DOWNLOAD_ENABLED == 'true') && ($this->count_contents() > 0)) {
-			reset($this->contents);
-			while (list ($products_id,) = each($this->contents)) {
-				if (isset ($this->contents[$products_id]['attributes'])) {
-					reset($this->contents[$products_id]['attributes']);
-					while (list (, $value) = each($this->contents[$products_id]['attributes'])) {
-						$virtual_check_query = xtc_db_query("select count(*) as total from ".TABLE_PRODUCTS_ATTRIBUTES." pa, ".TABLE_PRODUCTS_ATTRIBUTES_DOWNLOAD." pad where pa.products_id = '".$products_id."' and pa.options_values_id = '".$value."' and pa.products_attributes_id = pad.products_attributes_id");
-						$virtual_check = xtc_db_fetch_array($virtual_check_query);
-
-						if ($virtual_check['total'] > 0) {
-							switch ($this->content_type) {
-								case 'physical' :
-									$this->content_type = 'mixed';
-									return $this->content_type;
-									break;
-
-								default :
-									$this->content_type = 'virtual';
-									break;
-							}
-						} else {
-							switch ($this->content_type) {
-								case 'virtual' :
-									$this->content_type = 'mixed';
-									return $this->content_type;
-									break;
-
-								default :
-									$this->content_type = 'physical';
-									break;
-							}
-						}
-					}
-				} else {
-					switch ($this->content_type) {
-						case 'virtual' :
-							$this->content_type = 'mixed';
-							return $this->content_type;
-							break;
-
-						default :
-							$this->content_type = 'physical';
-							break;
-					}
-				}
-			}
-		} else {
-			$this->content_type = 'physical';
-		}
-		return $this->content_type;
-	}
-
-	function unserialize($broken) {
-		for (reset($broken); $kv = each($broken);) {
-			$key = $kv['key'];
-			if (gettype($this-> $key) != "user function")
-				$this-> $key = $kv['value'];
-		}
-	}
-	// GV Code Start
-	// ------------------------ ICW CREDIT CLASS Gift Voucher Addittion-------------------------------Start
-	// amend count_contents to show nil contents for shipping
-	// as we don't want to quote for 'virtual' item
-	// GLOBAL CONSTANTS if NO_COUNT_ZERO_WEIGHT is true then we don't count any product with a weight
-	// which is less than or equal to MINIMUM_WEIGHT
-	// otherwise we just don't count gift certificates
-
-	function count_contents_virtual() { // get total number of items in cart disregard gift vouchers
-		$total_items = 0;
-		if (is_array($this->contents)) {
-			reset($this->contents);
-			while (list ($products_id,) = each($this->contents)) {
-				$no_count = false;
-				$gv_query = xtc_db_query("select products_model from ".TABLE_PRODUCTS." where products_id = '".$products_id."'");
-				$gv_result = xtc_db_fetch_array($gv_query);
-				if (@ereg('^GIFT', $gv_result['products_model'])) {
-					$no_count = true;
-				}
-				if (NO_COUNT_ZERO_WEIGHT == 1) {
-					$gv_query = xtc_db_query("select products_weight from ".TABLE_PRODUCTS." where products_id = '".xtc_get_prid($products_id)."'");
-					$gv_result = xtc_db_fetch_array($gv_query);
-					if ($gv_result['products_weight'] <= MINIMUM_WEIGHT) {
-						$no_count = true;
-					}
-				}
-				if (!$no_count)
-					$total_items += $this->get_quantity($products_id);
-			}
-		}
-		return $total_items;
-	}
-	// ------------------------ ICW CREDIT CLASS Gift Voucher Addittion-------------------------------End
-	//GV Code End
-}
+<?php
+
+/* -----------------------------------------------------------------------------------------
+   $Id: shopping_cart.php 1534 2006-08-20 19:39:22Z mz $
+
+   XT-Commerce - community made shopping
+   http://www.xt-commerce.com
+
+   Copyright (c) 2003 XT-Commerce
+   -----------------------------------------------------------------------------------------
+   based on: 
+   (c) 2000-2001 The Exchange Project  (earlier name of osCommerce)
+   (c) 2002-2003 osCommerce(shopping_cart.php,v 1.32 2003/02/11); www.oscommerce.com
+   (c) 2003	 nextcommerce (shopping_cart.php,v 1.21 2003/08/17); www.nextcommerce.org
+
+   Released under the GNU General Public License
+   -----------------------------------------------------------------------------------------
+   Third Party contributions:
+
+   Customers Status v3.x  (c) 2002-2003 Copyright Elari elari@free.fr | www.unlockgsm.com/dload-osc/ | CVS : http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/elari/?sortby=date#dirlist
+
+   Credit Class/Gift Vouchers/Discount Coupons (Version 5.10)
+   http://www.oscommerce.com/community/contributions,282
+   Copyright (c) Strider | Strider@oscworks.com
+   Copyright (c  Nick Stanko of UkiDev.com, nick@ukidev.com
+   Copyright (c) Andre ambidex@gmx.net
+   Copyright (c) 2001,2002 Ian C Wilson http://www.phesis.org
+
+   Released under the GNU General Public License
+   ---------------------------------------------------------------------------------------*/
+
+// include needed functions
+require_once (DIR_FS_INC.'xtc_create_random_value.inc.php');
+require_once (DIR_FS_INC.'xtc_get_prid.inc.php');
+require_once (DIR_FS_INC.'xtc_draw_form.inc.php');
+require_once (DIR_FS_INC.'xtc_draw_input_field.inc.php');
+require_once (DIR_FS_INC.'xtc_image_submit.inc.php');
+require_once (DIR_FS_INC.'xtc_get_tax_description.inc.php');
+
+class shoppingCart {
+	var $contents, $total, $weight, $cartID, $content_type;
+
+	function shoppingCart() {
+		$this->reset();
+
+	}
+
+	function restore_contents() {
+
+		if (!isset ($_SESSION['customer_id']))
+			return false;
+
+		// insert current cart contents in database
+		if (is_array($this->contents)) {
+			reset($this->contents);
+			while (list ($products_id,) = each($this->contents)) {
+				$qty = $this->contents[$products_id]['qty'];
+				$product_query = xtc_db_query("select products_id from ".TABLE_CUSTOMERS_BASKET." where customers_id = '".$_SESSION['customer_id']."' and products_id = '".$products_id."'");
+				if (!xtc_db_num_rows($product_query)) {
+					xtc_db_query("insert into ".TABLE_CUSTOMERS_BASKET." (customers_id, products_id, customers_basket_quantity, customers_basket_date_added) values ('".$_SESSION['customer_id']."', '".$products_id."', '".$qty."', '".date('Ymd')."')");
+					if (isset ($this->contents[$products_id]['attributes'])) {
+						reset($this->contents[$products_id]['attributes']);
+						while (list ($option, $value) = each($this->contents[$products_id]['attributes'])) {
+							xtc_db_query("insert into ".TABLE_CUSTOMERS_BASKET_ATTRIBUTES." (customers_id, products_id, products_options_id, products_options_value_id) values ('".$_SESSION['customer_id']."', '".$products_id."', '".$option."', '".$value."')");
+						}
+					}
+				} else {
+					xtc_db_query("update ".TABLE_CUSTOMERS_BASKET." set customers_basket_quantity = '".$qty."' where customers_id = '".$_SESSION['customer_id']."' and products_id = '".$products_id."'");
+				}
+			}
+		}
+
+		// reset per-session cart contents, but not the database contents
+		$this->reset(false);
+
+		$products_query = xtc_db_query("select products_id, customers_basket_quantity from ".TABLE_CUSTOMERS_BASKET." where customers_id = '".$_SESSION['customer_id']."'");
+		while ($products = xtc_db_fetch_array($products_query)) {
+			$this->contents[$products['products_id']] = array ('qty' => $products['customers_basket_quantity']);
+			// attributes
+			$attributes_query = xtc_db_query("select products_options_id, products_options_value_id from ".TABLE_CUSTOMERS_BASKET_ATTRIBUTES." where customers_id = '".$_SESSION['customer_id']."' and products_id = '".$products['products_id']."'");
+			while ($attributes = xtc_db_fetch_array($attributes_query)) {
+				$this->contents[$products['products_id']]['attributes'][$attributes['products_options_id']] = $attributes['products_options_value_id'];
+			}
+		}
+
+		$this->cleanup();
+	}
+
+	function reset($reset_database = false) {
+
+		$this->contents = array ();
+		$this->total = 0;
+		$this->weight = 0;
+		$this->content_type = false;
+
+		if (isset ($_SESSION['customer_id']) && ($reset_database == true)) {
+			xtc_db_query("delete from ".TABLE_CUSTOMERS_BASKET." where customers_id = '".$_SESSION['customer_id']."'");
+			xtc_db_query("delete from ".TABLE_CUSTOMERS_BASKET_ATTRIBUTES." where customers_id = '".$_SESSION['customer_id']."'");
+		}
+
+		unset ($this->cartID);
+		if (isset ($_SESSION['cartID']))
+			unset ($_SESSION['cartID']);
+	}
+
+	function add_cart($products_id, $qty = '1', $attributes = '', $notify = true) {
+		global $new_products_id_in_cart;
+
+		$products_id = xtc_get_uprid($products_id, $attributes);
+		if ($notify == true) {
+			$_SESSION['new_products_id_in_cart'] = $products_id;
+		}
+
+		if ($this->in_cart($products_id)) {
+			$this->update_quantity($products_id, $qty, $attributes);
+		} else {
+			$this->contents[] = array ($products_id);
+			$this->contents[$products_id] = array ('qty' => $qty);
+			// insert into database
+			if (isset ($_SESSION['customer_id']))
+				xtc_db_query("insert into ".TABLE_CUSTOMERS_BASKET." (customers_id, products_id, customers_basket_quantity, customers_basket_date_added) values ('".$_SESSION['customer_id']."', '".$products_id."', '".$qty."', '".date('Ymd')."')");
+
+			if (is_array($attributes)) {
+				reset($attributes);
+				while (list ($option, $value) = each($attributes)) {
+					$this->contents[$products_id]['attributes'][$option] = $value;
+					// insert into database
+					if (isset ($_SESSION['customer_id']))
+						xtc_db_query("insert into ".TABLE_CUSTOMERS_BASKET_ATTRIBUTES." (customers_id, products_id, products_options_id, products_options_value_id) values ('".$_SESSION['customer_id']."', '".$products_id."', '".$option."', '".$value."')");
+				}
+			}
+		}
+		$this->cleanup();
+
+		// assign a temporary unique ID to the order contents to prevent hack attempts during the checkout procedure
+		$this->cartID = $this->generate_cart_id();
+	}
+
+	function update_quantity($products_id, $quantity = '', $attributes = '') {
+
+		if (empty ($quantity))
+			return true; // nothing needs to be updated if theres no quantity, so we return true..
+
+		$this->contents[$products_id] = array ('qty' => $quantity);
+		// update database
+		if (isset ($_SESSION['customer_id']))
+			xtc_db_query("update ".TABLE_CUSTOMERS_BASKET." set customers_basket_quantity = '".$quantity."' where customers_id = '".$_SESSION['customer_id']."' and products_id = '".$products_id."'");
+
+		if (is_array($attributes)) {
+			reset($attributes);
+			while (list ($option, $value) = each($attributes)) {
+				$this->contents[$products_id]['attributes'][$option] = $value;
+				// update database
+				if (isset ($_SESSION['customer_id']))
+					xtc_db_query("update ".TABLE_CUSTOMERS_BASKET_ATTRIBUTES." set products_options_value_id = '".$value."' where customers_id = '".$_SESSION['customer_id']."' and products_id = '".$products_id."' and products_options_id = '".$option."'");
+			}
+		}
+	}
+
+	function cleanup() {
+
+		reset($this->contents);
+		while (list ($key,) = each($this->contents)) {
+			if ($this->contents[$key]['qty'] < 1) {
+				unset ($this->contents[$key]);
+				// remove from database
+				if (xtc_session_is_registered('customer_id')) {
+					xtc_db_query("delete from ".TABLE_CUSTOMERS_BASKET." where customers_id = '".$_SESSION['customer_id']."' and products_id = '".$key."'");
+					xtc_db_query("delete from ".TABLE_CUSTOMERS_BASKET_ATTRIBUTES." where customers_id = '".$_SESSION['customer_id']."' and products_id = '".$key."'");
+				}
+			}
+		}
+	}
+
+	function count_contents() { // get total number of items in cart 
+		$total_items = 0;
+		if (is_array($this->contents)) {
+			reset($this->contents);
+			while (list ($products_id,) = each($this->contents)) {
+				$total_items += $this->get_quantity($products_id);
+			}
+		}
+
+		return $total_items;
+	}
+
+	function get_quantity($products_id) {
+		if (isset ($this->contents[$products_id])) {
+			return $this->contents[$products_id]['qty'];
+		} else {
+			return 0;
+		}
+	}
+
+	function in_cart($products_id) {
+		if (isset ($this->contents[$products_id])) {
+			return true;
+		} else {
+			return false;
+		}
+	}
+
+	function remove($products_id) {
+		
+		$this->contents[$products_id]= NULL;
+		// remove from database
+		if (xtc_session_is_registered('customer_id')) {
+			xtc_db_query("delete from ".TABLE_CUSTOMERS_BASKET." where customers_id = '".$_SESSION['customer_id']."' and products_id = '".$products_id."'");
+			xtc_db_query("delete from ".TABLE_CUSTOMERS_BASKET_ATTRIBUTES." where customers_id = '".$_SESSION['customer_id']."' and products_id = '".$products_id."'");
+		}
+
+		// assign a temporary unique ID to the order contents to prevent hack attempts during the checkout procedure
+		$this->cartID = $this->generate_cart_id();
+	}
+
+	function remove_all() {
+		$this->reset();
+	}
+
+	function get_product_id_list() {
+		$product_id_list = '';
+		if (is_array($this->contents)) {
+			reset($this->contents);
+			while (list ($products_id,) = each($this->contents)) {
+				$product_id_list .= ', '.$products_id;
+			}
+		}
+
+		return substr($product_id_list, 2);
+	}
+
+	function calculate() {
+		global $xtPrice;
+		$this->total = 0;
+		$this->weight = 0;
+		$this->tax = array ();
+		if (!is_array($this->contents))
+			return 0;
+
+		reset($this->contents);
+		while (list ($products_id,) = each($this->contents)) {
+			$qty = $this->contents[$products_id]['qty'];
+
+			// products price
+			$product_query = xtc_db_query("select products_id, products_price, products_discount_allowed, products_tax_class_id, products_weight from ".TABLE_PRODUCTS." where products_id='".xtc_get_prid($products_id)."'");
+			if ($product = xtc_db_fetch_array($product_query)) {
+
+				$products_price = $xtPrice->xtcGetPrice($product['products_id'], $format = false, $qty, $product['products_tax_class_id'], $product['products_price']);
+				$this->total += $products_price * $qty;
+				$this->weight += ($qty * $product['products_weight']);
+				
+				
+							// attributes price
+				$attribute_price = 0;
+			if (isset ($this->contents[$products_id]['attributes'])) {
+				reset($this->contents[$products_id]['attributes']);
+				while (list ($option, $value) = each($this->contents[$products_id]['attributes'])) {
+
+					$values = $xtPrice->xtcGetOptionPrice($product['products_id'], $option, $value);
+					$this->weight += $values['weight'] * $qty;
+					$this->total += $values['price'] * $qty;
+					$attribute_price+=$values['price'];
+				}
+			}
+				
+				
+				
+				if ($product['products_tax_class_id'] != 0) {
+					
+					if ($_SESSION['customers_status']['customers_status_ot_discount_flag'] == 1) {
+						$products_price_tax = $products_price - ($products_price / 100 * $_SESSION['customers_status']['customers_status_ot_discount']);
+						$attribute_price_tax = $attribute_price - ($attribute_price / 100 * $_SESSION['customers_status']['customers_status_ot_discount']);
+					}
+						
+						
+					$products_tax = $xtPrice->TAX[$product['products_tax_class_id']];
+					$products_tax_description = xtc_get_tax_description($product['products_tax_class_id']);
+
+					
+					// price incl tax
+					if ($_SESSION['customers_status']['customers_status_show_price_tax'] == '1') {
+						if ($_SESSION['customers_status']['customers_status_ot_discount_flag'] == 1) {
+							$this->tax[$product['products_tax_class_id']]['value'] += ((($products_price_tax+$attribute_price_tax) / (100 + $products_tax)) * $products_tax)*$qty;
+							$this->tax[$product['products_tax_class_id']]['desc'] = TAX_ADD_TAX."$products_tax_description";
+						} else {
+							$this->tax[$product['products_tax_class_id']]['value'] += ((($products_price+$attribute_price) / (100 + $products_tax)) * $products_tax)*$qty;
+							$this->tax[$product['products_tax_class_id']]['desc'] = TAX_ADD_TAX."$products_tax_description";
+						}
+						
+					}
+					// excl tax + tax at checkout
+					if ($_SESSION['customers_status']['customers_status_show_price_tax'] == 0 && $_SESSION['customers_status']['customers_status_add_tax_ot'] == 1) {
+						if ($_SESSION['customers_status']['customers_status_ot_discount_flag'] == 1) {
+							$this->tax[$product['products_tax_class_id']]['value'] += (($products_price_tax+$attribute_price_tax) / 100) * ($products_tax)*$qty;
+							$this->total+=(($products_price_tax+$attribute_price_tax) / 100) * ($products_tax)*$qty;
+							$this->tax[$product['products_tax_class_id']]['desc'] = TAX_NO_TAX."$products_tax_description";
+						} else {
+							$this->tax[$product['products_tax_class_id']]['value'] += (($products_price+$attribute_price) / 100) * ($products_tax)*$qty;
+							$this->total+= (($products_price+$attribute_price) / 100) * ($products_tax)*$qty;
+							$this->tax[$product['products_tax_class_id']]['desc'] = TAX_NO_TAX."$products_tax_description";
+						}
+					}				
+				}
+			}
+
+		}
+//		echo 'total_VOR'.$this->total;
+		if ($_SESSION['customers_status']['customers_status_ot_discount_flag'] != 0) {
+//			$this->total -= $this->total / 100 * $_SESSION['customers_status']['customers_status_ot_discount'];
+		}
+//		echo 'total_NACH'.$this->total;
+
+	}
+
+	function attributes_price($products_id) {
+		global $xtPrice;
+		if (isset ($this->contents[$products_id]['attributes'])) {
+			reset($this->contents[$products_id]['attributes']);
+			while (list ($option, $value) = each($this->contents[$products_id]['attributes'])) {
+
+				$values = $xtPrice->xtcGetOptionPrice($products_id, $option, $value);
+				$attributes_price += $values['price'];
+
+			}
+		}
+		return $attributes_price;
+	}
+
+	function get_products() {
+		global $xtPrice,$main;
+		if (!is_array($this->contents))
+			return false;
+
+		$products_array = array ();
+		reset($this->contents);
+		while (list ($products_id,) = each($this->contents)) {
+			if($this->contents[$products_id]['qty'] != 0 || $this->contents[$products_id]['qty'] !=''){			
+			$products_query = xtc_db_query("select p.products_id, pd.products_name,p.products_shippingtime, p.products_image, p.products_model, p.products_price, p.products_discount_allowed, p.products_weight, p.products_width, p.products_length, p.products_height, p.products_tax_class_id from ".TABLE_PRODUCTS." p, ".TABLE_PRODUCTS_DESCRIPTION." pd where p.products_id='".xtc_get_prid($products_id)."' and pd.products_id = p.products_id and pd.language_id = '".$_SESSION['languages_id']."'");
+			if ($products = xtc_db_fetch_array($products_query)) {
+				$prid = $products['products_id'];
+
+				$products_price = $xtPrice->xtcGetPrice($products['products_id'], $format = false, $this->contents[$products_id]['qty'], $products['products_tax_class_id'], $products['products_price']);
+
+				$products_array[] = array ('id' => $products_id, 'name' => $products['products_name'], 'model' => $products['products_model'], 'image' => $products['products_image'], 'price' => $products_price + $this->attributes_price($products_id), 'quantity' => $this->contents[$products_id]['qty'], 'weight' => $products['products_weight'], 'width' => $products['products_width'], 'length' => $products['products_length'], 'height' => $products['products_height'], 'shipping_time' => $main->getShippingStatusName($products['products_shippingtime']), 'final_price' => ($products_price + $this->attributes_price($products_id)), 'tax_class_id' => $products['products_tax_class_id'], 'attributes' => $this->contents[$products_id]['attributes']);
+			}
+			}
+		}
+
+		return $products_array;
+	}
+
+	function show_total() {
+		$this->calculate();
+
+		return $this->total;
+	}
+
+	function show_weight() {
+		$this->calculate();
+
+		return $this->weight;
+	}
+
+	function show_tax($format = true) {
+		global $xtPrice;
+		$this->calculate();
+		$output = "";
+		$val=0;
+		foreach ($this->tax as $key => $value) {
+			if ($this->tax[$key]['value'] > 0 ) {
+			$output .= $this->tax[$key]['desc'].": ".$xtPrice->xtcFormat($this->tax[$key]['value'], true)."<br />";
+			$val = $this->tax[$key]['value'];
+			}
+		}
+		if ($format) {
+		return $output;
+		} else {
+			return $val;
+		}
+	}
+
+	function generate_cart_id($length = 5) {
+		return xtc_create_random_value($length, 'digits');
+	}
+
+	function get_content_type() {
+		$this->content_type = false;
+
+		if ((DOWNLOAD_ENABLED == 'true') && ($this->count_contents() > 0)) {
+			reset($this->contents);
+			while (list ($products_id,) = each($this->contents)) {
+				if (isset ($this->contents[$products_id]['attributes'])) {
+					reset($this->contents[$products_id]['attributes']);
+					while (list (, $value) = each($this->contents[$products_id]['attributes'])) {
+						$virtual_check_query = xtc_db_query("select count(*) as total from ".TABLE_PRODUCTS_ATTRIBUTES." pa, ".TABLE_PRODUCTS_ATTRIBUTES_DOWNLOAD." pad where pa.products_id = '".$products_id."' and pa.options_values_id = '".$value."' and pa.products_attributes_id = pad.products_attributes_id");
+						$virtual_check = xtc_db_fetch_array($virtual_check_query);
+
+						if ($virtual_check['total'] > 0) {
+							switch ($this->content_type) {
+								case 'physical' :
+									$this->content_type = 'mixed';
+									return $this->content_type;
+									break;
+
+								default :
+									$this->content_type = 'virtual';
+									break;
+							}
+						} else {
+							switch ($this->content_type) {
+								case 'virtual' :
+									$this->content_type = 'mixed';
+									return $this->content_type;
+									break;
+
+								default :
+									$this->content_type = 'physical';
+									break;
+							}
+						}
+					}
+				} else {
+					switch ($this->content_type) {
+						case 'virtual' :
+							$this->content_type = 'mixed';
+							return $this->content_type;
+							break;
+
+						default :
+							$this->content_type = 'physical';
+							break;
+					}
+				}
+			}
+		} else {
+			$this->content_type = 'physical';
+		}
+		return $this->content_type;
+	}
+
+	function unserialize($broken) {
+		for (reset($broken); $kv = each($broken);) {
+			$key = $kv['key'];
+			if (gettype($this-> $key) != "user function")
+				$this-> $key = $kv['value'];
+		}
+	}
+	// GV Code Start
+	// ------------------------ ICW CREDIT CLASS Gift Voucher Addittion-------------------------------Start
+	// amend count_contents to show nil contents for shipping
+	// as we don't want to quote for 'virtual' item
+	// GLOBAL CONSTANTS if NO_COUNT_ZERO_WEIGHT is true then we don't count any product with a weight
+	// which is less than or equal to MINIMUM_WEIGHT
+	// otherwise we just don't count gift certificates
+
+	function count_contents_virtual() { // get total number of items in cart disregard gift vouchers
+		$total_items = 0;
+		if (is_array($this->contents)) {
+			reset($this->contents);
+			while (list ($products_id,) = each($this->contents)) {
+				$no_count = false;
+				$gv_query = xtc_db_query("select products_model from ".TABLE_PRODUCTS." where products_id = '".$products_id."'");
+				$gv_result = xtc_db_fetch_array($gv_query);
+				if (@ereg('^GIFT', $gv_result['products_model'])) {
+					$no_count = true;
+				}
+				if (NO_COUNT_ZERO_WEIGHT == 1) {
+					$gv_query = xtc_db_query("select products_weight from ".TABLE_PRODUCTS." where products_id = '".xtc_get_prid($products_id)."'");
+					$gv_result = xtc_db_fetch_array($gv_query);
+					if ($gv_result['products_weight'] <= MINIMUM_WEIGHT) {
+						$no_count = true;
+					}
+				}
+				if (!$no_count)
+					$total_items += $this->get_quantity($products_id);
+			}
+		}
+		return $total_items;
+	}
+	// ------------------------ ICW CREDIT CLASS Gift Voucher Addittion-------------------------------End
+	//GV Code End
+}
 ?>
\ No newline at end of file
diff --git a/lang/english/admin/categories.php b/lang/english/admin/categories.php
index 8704461..a75e559 100644
--- a/lang/english/admin/categories.php
+++ b/lang/english/admin/categories.php
@@ -1,190 +1,200 @@
-<?php
-/* --------------------------------------------------------------
-   $Id: categories.php 1249 2005-09-27 12:06:40Z gwinger $
-
-   XT-Commerce - community made shopping
-   http://www.xt-commerce.com
-
-   Copyright (c) 2003 XT-Commerce
-   --------------------------------------------------------------
-   based on:
-   (c) 2000-2001 The Exchange Project  (earlier name of osCommerce)
-   (c) 2002-2003 osCommerce(categories.php,v 1.22 2002/08/17); www.oscommerce.com
-   (c) 2003	 nextcommerce (categories.php,v 1.10 2003/08/14); www.nextcommerce.org
-
-   Released under the GNU General Public License
-   --------------------------------------------------------------*/
- 
-define('TEXT_EDIT_STATUS', 'Status');
-define('HEADING_TITLE', 'Categories / Products');
-define('HEADING_TITLE_SEARCH', 'Search: ');
-define('HEADING_TITLE_GOTO', 'Go To:');
-
-define('TABLE_HEADING_ID', 'ID');
-define('TABLE_HEADING_CATEGORIES_PRODUCTS', 'Categories / Products');
-define('TABLE_HEADING_ACTION', 'Action');
-define('TABLE_HEADING_STATUS', 'Status');
-define('TABLE_HEADING_STARTPAGE', 'TOP');
-define('TABLE_HEADING_STOCK','Stock Warning');
-define('TABLE_HEADING_SORT','Sort');
-define('TABLE_HEADING_EDIT','Edit');
-
-define('TEXT_ACTIVE_ELEMENT','Active Element');
-define('TEXT_INFORMATIONS','Informations');
-define('TEXT_MARKED_ELEMENTS','Marked Elements');
-define('TEXT_INSERT_ELEMENT','New Element');
-
-define('TEXT_WARN_MAIN','Main');
-define('TEXT_NEW_PRODUCT', 'New Product in &quot;%s&quot;');
-define('TEXT_CATEGORIES', 'Categories:');
-define('TEXT_PRODUCTS', 'Products:');
-define('TEXT_PRODUCTS_PRICE_INFO', 'Price:');
-define('TEXT_PRODUCTS_TAX_CLASS', 'Tax Class:');
-define('TEXT_PRODUCTS_AVERAGE_RATING', 'Average Rating:');
-define('TEXT_PRODUCTS_QUANTITY_INFO', 'Quantity:');
-define('TEXT_PRODUCTS_DISCOUNT_ALLOWED_INFO', 'Max. allowed Discount:');
-define('TEXT_DATE_ADDED', 'Date Added:');
-define('TEXT_DATE_AVAILABLE', 'Date Available:');
-define('TEXT_LAST_MODIFIED', 'Last Modified:');
-define('TEXT_IMAGE_NONEXISTENT', 'IMAGE DOES NOT EXIST');
-define('TEXT_NO_CHILD_CATEGORIES_OR_PRODUCTS', 'Please insert a new category or product in <br />&nbsp;<br /><b>%s</b>');
-define('TEXT_PRODUCT_MORE_INFORMATION', 'For more information, please visit this products <a href="http://%s" target="blank"><u>webpage</u></a>.');
-define('TEXT_PRODUCT_DATE_ADDED', 'This product was added to our catalog on %s.');
-define('TEXT_PRODUCT_DATE_AVAILABLE', 'This product will be in stock on %s.');
-define('TEXT_CHOOSE_INFO_TEMPLATE', 'Product-Info Template:');
-define('TEXT_CHOOSE_OPTIONS_TEMPLATE', 'Product-Optionen Template:');
-define('TEXT_SELECT', 'Please select:');
-
-define('TEXT_EDIT_INTRO', 'Please make any necessary changes');
-define('TEXT_EDIT_CATEGORIES_ID', 'Category ID:');
-define('TEXT_EDIT_CATEGORIES_NAME', 'Category Name:');
-define('TEXT_EDIT_CATEGORIES_HEADING_TITLE', 'Category Heading:');
-define('TEXT_EDIT_CATEGORIES_DESCRIPTION', 'Category Description:');
-define('TEXT_EDIT_CATEGORIES_IMAGE', 'Category Image:');
-
-define('TEXT_EDIT_SORT_ORDER', 'Sort Order:');
-
-define('TEXT_INFO_COPY_TO_INTRO', 'Please choose a new category you wish to copy this product to');
-define('TEXT_INFO_CURRENT_CATEGORIES', 'Current Categories:');
-
-define('TEXT_INFO_HEADING_NEW_CATEGORY', 'New Category');
-define('TEXT_INFO_HEADING_EDIT_CATEGORY', 'Edit Category');
-define('TEXT_INFO_HEADING_DELETE_CATEGORY', 'Delete Category');
-define('TEXT_INFO_HEADING_MOVE_CATEGORY', 'Move Category');
-define('TEXT_INFO_HEADING_DELETE_PRODUCT', 'Delete Product');
-define('TEXT_INFO_HEADING_MOVE_PRODUCT', 'Move Product');
-define('TEXT_INFO_HEADING_COPY_TO', 'Copy To');
-define('TEXT_INFO_HEADING_MOVE_ELEMENTS', 'Move Elements');
-define('TEXT_INFO_HEADING_DELETE_ELEMENTS', 'Delete Elements');
-
-define('TEXT_DELETE_CATEGORY_INTRO', 'Are you sure you want to delete this category?');
-define('TEXT_DELETE_PRODUCT_INTRO', 'Are you sure you want to permanently delete this product?');
-
-define('TEXT_DELETE_WARNING_CHILDS', '<b>WARNING:</b> There are %s (Child-)Categories still linked to this category!');
-define('TEXT_DELETE_WARNING_PRODUCTS', '<b>WARNING:</b> There are %s products still linked to this category!');
-
-define('TEXT_MOVE_WARNING_CHILDS', '<b>Info:</b> There are %s (Child-)Categories still linked to this category!');
-define('TEXT_MOVE_WARNING_PRODUCTS', '<b>Info:</b> There are %s products still linked to this category!');
-
-define('TEXT_MOVE_PRODUCTS_INTRO', 'Please select which category you wish <b>%s</b> to reside in');
-define('TEXT_MOVE_CATEGORIES_INTRO', 'Please select which category you wish <b>%s</b> to reside in');
-define('TEXT_MOVE', 'Move <b>%s</b> to:');
-define('TEXT_MOVE_ALL', 'Move all to:');
-
-define('TEXT_NEW_CATEGORY_INTRO', 'Please fill out the following information for the new category.');
-define('TEXT_CATEGORIES_NAME', 'Category Name:');
-define('TEXT_CATEGORIES_IMAGE', 'Category Image:');
-
-define('TEXT_META_TITLE', 'Meta Title:');
-define('TEXT_META_DESCRIPTION', 'Meta Description:');
-define('TEXT_META_KEYWORDS', 'Meta Keywords:');
-
-define('TEXT_SORT_ORDER', 'Sort Order:');
-
-define('TEXT_PRODUCTS_STATUS', 'Products Status:');
-define('TEXT_PRODUCTS_STARTPAGE', 'Show on startpage:');
-define('TEXT_PRODUCTS_STARTPAGE_YES', 'Yes');
-define('TEXT_PRODUCTS_STARTPAGE_NO', 'No');
-define('TEXT_PRODUCTS_STARTPAGE_SORT', 'Sort order (startpage):');
-define('TEXT_PRODUCTS_DATE_AVAILABLE', 'Date Available:');
-define('TEXT_PRODUCT_AVAILABLE', 'In Stock');
-define('TEXT_PRODUCT_NOT_AVAILABLE', 'Out of Stock');
-define('TEXT_PRODUCTS_MANUFACTURER', 'Products Manufacturer:');
-define('TEXT_PRODUCTS_NAME', 'Products Name:');
-define('TEXT_PRODUCTS_DESCRIPTION', 'Products Description:');
-define('TEXT_PRODUCTS_QUANTITY', 'Products Quantity:');
-define('TEXT_PRODUCTS_MODEL', 'Products Model:');
-define('TEXT_PRODUCTS_IMAGE', 'Products Image:');
-define('TEXT_PRODUCTS_URL', 'Products URL:');
-define('TEXT_PRODUCTS_URL_WITHOUT_HTTP', '<small>(without http://)</small>');
-define('TEXT_PRODUCTS_PRICE', 'Products Price:');
-define('TEXT_PRODUCTS_WEIGHT', 'Products Weight:');
-define('TEXT_PRODUCTS_EAN','Barcode/EAN');
-define('TEXT_PRODUCT_LINKED_TO','Linked to:');
-
-define('TEXT_DELETE', 'Delete');
-
-define('EMPTY_CATEGORY', 'Empty Category');
-
-define('TEXT_HOW_TO_COPY', 'Copy Method:');
-define('TEXT_COPY_AS_LINK', 'Link product');
-define('TEXT_COPY_AS_DUPLICATE', 'Duplicate product');
-
-define('ERROR_CANNOT_LINK_TO_SAME_CATEGORY', 'Error: Can not link products in the same directory.');
-define('ERROR_CATALOG_IMAGE_DIRECTORY_NOT_WRITEABLE', 'Error: Catalog images directory is not writeable: ' . DIR_FS_CATALOG_IMAGES);
-define('ERROR_CATALOG_IMAGE_DIRECTORY_DOES_NOT_EXIST', 'Error: Catalog images directory does not exist: ' . DIR_FS_CATALOG_IMAGES);
-
-define('TEXT_PRODUCTS_DISCOUNT_ALLOWED','Discount allowed:');
-define('HEADING_PRICES_OPTIONS','<b>Price options</b>');
-define('HEADING_PRODUCT_IMAGES','<b>Products Images</b>');
-define('TEXT_PRODUCTS_WEIGHT_INFO','<small>(kg)</small>');
-define('TEXT_PRODUCTS_SHORT_DESCRIPTION','Short description:');
-define('TEXT_PRODUCTS_KEYWORDS', 'Extra words for Search:');
-define('TXT_STK','Pcs: ');
-define('TXT_PRICE','a :');
-define('TXT_NETTO','Net price: ');
-define('TEXT_NETTO','Net: ');
-define('TXT_STAFFELPREIS','Graduated Price');
-
-define('HEADING_PRODUCTS_MEDIA','<b>Products Media</b>');
-define('TABLE_HEADING_PRICE','Price');
-
-define('TEXT_CHOOSE_INFO_TEMPLATE','Productdetail Template');
-define('TEXT_SELECT','--Select--');
-define('TEXT_CHOOSE_OPTIONS_TEMPLATE','Productoptions Template');
-define('SAVE_ENTRY','Save ?');
-
-define('TEXT_FSK18','FSK 18:');
-define('TEXT_CHOOSE_INFO_TEMPLATE_CATEGORIE','Template for Category Listing');
-define('TEXT_CHOOSE_INFO_TEMPLATE_LISTING','Template for Product Listing');
-define('TEXT_PRODUCTS_SORT','Sorting:');
-define('TEXT_EDIT_PRODUCT_SORT_ORDER','Product Sorting');
-define('TXT_PRICES','Price');
-define('TXT_NAME','Productname');
-define('TXT_ORDERED','Products ordered');
-define('TXT_SORT','Sorting');
-define('TXT_WEIGHT','Weight');
-define('TXT_QTY','On Stock');
-
-define('TEXT_MULTICOPY','Multiple');
-define('TEXT_MULTICOPY_DESC','Copy elements into following categories (If one box selected, Single settings will be ignored.)');
-define('TEXT_SINGLECOPY','Single');
-define('TEXT_SINGLECOPY_DESC','Copy elements into following category');
-define('TEXT_SINGLECOPY_CATEGORY','Category:');
-
-define('TEXT_PRODUCTS_VPE','Unit');
-define('TEXT_PRODUCTS_VPE_VISIBLE','Show Unit Price:');
-define('TEXT_PRODUCTS_VPE_VALUE',' Value:');
-
-define('CROSS_SELLING','Cross selling for article');
-define('CROSS_SELLING_SEARCH','Search product:');
-define('BUTTON_EDIT_CROSS_SELLING','Cross selling');
-define('HEADING_DEL','delete');
-define('HEADING_SORTING','sorting');
-define('HEADING_MODEL','model');
-define('HEADING_NAME','article');
-define('HEADING_CATEGORY','category');
-define('HEADING_ADD','Add?');
-define('HEADING_GROUP','Group');
-
+<?php
+/* --------------------------------------------------------------
+   $Id: categories.php 1249 2005-09-27 12:06:40Z gwinger $
+
+   XT-Commerce - community made shopping
+   http://www.xt-commerce.com
+
+   Copyright (c) 2003 XT-Commerce
+   --------------------------------------------------------------
+   based on:
+   (c) 2000-2001 The Exchange Project  (earlier name of osCommerce)
+   (c) 2002-2003 osCommerce(categories.php,v 1.22 2002/08/17); www.oscommerce.com
+   (c) 2003	 nextcommerce (categories.php,v 1.10 2003/08/14); www.nextcommerce.org
+
+   Released under the GNU General Public License
+   --------------------------------------------------------------*/
+ 
+define('TEXT_EDIT_STATUS', 'Status');
+define('HEADING_TITLE', 'Categories / Products');
+define('HEADING_TITLE_SEARCH', 'Search: ');
+define('HEADING_TITLE_GOTO', 'Go To:');
+
+define('TABLE_HEADING_ID', 'ID');
+define('TABLE_HEADING_CATEGORIES_PRODUCTS', 'Categories / Products');
+define('TABLE_HEADING_ACTION', 'Action');
+define('TABLE_HEADING_STATUS', 'Status');
+define('TABLE_HEADING_STARTPAGE', 'TOP');
+define('TABLE_HEADING_STOCK','Stock Warning');
+define('TABLE_HEADING_SORT','Sort');
+define('TABLE_HEADING_EDIT','Edit');
+
+define('TEXT_ACTIVE_ELEMENT','Active Element');
+define('TEXT_INFORMATIONS','Informations');
+define('TEXT_MARKED_ELEMENTS','Marked Elements');
+define('TEXT_INSERT_ELEMENT','New Element');
+
+define('TEXT_WARN_MAIN','Main');
+define('TEXT_NEW_PRODUCT', 'New Product in &quot;%s&quot;');
+define('TEXT_CATEGORIES', 'Categories:');
+define('TEXT_PRODUCTS', 'Products:');
+define('TEXT_PRODUCTS_PRICE_INFO', 'Price:');
+define('TEXT_PRODUCTS_TAX_CLASS', 'Tax Class:');
+define('TEXT_PRODUCTS_AVERAGE_RATING', 'Average Rating:');
+define('TEXT_PRODUCTS_QUANTITY_INFO', 'Quantity:');
+define('TEXT_PRODUCTS_DISCOUNT_ALLOWED_INFO', 'Max. allowed Discount:');
+define('TEXT_DATE_ADDED', 'Date Added:');
+define('TEXT_DATE_AVAILABLE', 'Date Available:');
+define('TEXT_LAST_MODIFIED', 'Last Modified:');
+define('TEXT_IMAGE_NONEXISTENT', 'IMAGE DOES NOT EXIST');
+define('TEXT_NO_CHILD_CATEGORIES_OR_PRODUCTS', 'Please insert a new category or product in <br />&nbsp;<br /><b>%s</b>');
+define('TEXT_PRODUCT_MORE_INFORMATION', 'For more information, please visit this products <a href="http://%s" target="blank"><u>webpage</u></a>.');
+define('TEXT_PRODUCT_DATE_ADDED', 'This product was added to our catalog on %s.');
+define('TEXT_PRODUCT_DATE_AVAILABLE', 'This product will be in stock on %s.');
+define('TEXT_CHOOSE_INFO_TEMPLATE', 'Product-Info Template:');
+define('TEXT_CHOOSE_OPTIONS_TEMPLATE', 'Product-Optionen Template:');
+define('TEXT_SELECT', 'Please select:');
+
+define('TEXT_EDIT_INTRO', 'Please make any necessary changes');
+define('TEXT_EDIT_CATEGORIES_ID', 'Category ID:');
+define('TEXT_EDIT_CATEGORIES_NAME', 'Category Name:');
+define('TEXT_EDIT_CATEGORIES_HEADING_TITLE', 'Category Heading:');
+define('TEXT_EDIT_CATEGORIES_DESCRIPTION', 'Category Description:');
+define('TEXT_EDIT_CATEGORIES_IMAGE', 'Category Image:');
+
+define('TEXT_EDIT_SORT_ORDER', 'Sort Order:');
+
+define('TEXT_INFO_COPY_TO_INTRO', 'Please choose a new category you wish to copy this product to');
+define('TEXT_INFO_CURRENT_CATEGORIES', 'Current Categories:');
+
+define('TEXT_INFO_HEADING_NEW_CATEGORY', 'New Category');
+define('TEXT_INFO_HEADING_EDIT_CATEGORY', 'Edit Category');
+define('TEXT_INFO_HEADING_DELETE_CATEGORY', 'Delete Category');
+define('TEXT_INFO_HEADING_MOVE_CATEGORY', 'Move Category');
+define('TEXT_INFO_HEADING_DELETE_PRODUCT', 'Delete Product');
+define('TEXT_INFO_HEADING_MOVE_PRODUCT', 'Move Product');
+define('TEXT_INFO_HEADING_COPY_TO', 'Copy To');
+define('TEXT_INFO_HEADING_MOVE_ELEMENTS', 'Move Elements');
+define('TEXT_INFO_HEADING_DELETE_ELEMENTS', 'Delete Elements');
+
+define('TEXT_DELETE_CATEGORY_INTRO', 'Are you sure you want to delete this category?');
+define('TEXT_DELETE_PRODUCT_INTRO', 'Are you sure you want to permanently delete this product?');
+
+define('TEXT_DELETE_WARNING_CHILDS', '<b>WARNING:</b> There are %s (Child-)Categories still linked to this category!');
+define('TEXT_DELETE_WARNING_PRODUCTS', '<b>WARNING:</b> There are %s products still linked to this category!');
+
+define('TEXT_MOVE_WARNING_CHILDS', '<b>Info:</b> There are %s (Child-)Categories still linked to this category!');
+define('TEXT_MOVE_WARNING_PRODUCTS', '<b>Info:</b> There are %s products still linked to this category!');
+
+define('TEXT_MOVE_PRODUCTS_INTRO', 'Please select which category you wish <b>%s</b> to reside in');
+define('TEXT_MOVE_CATEGORIES_INTRO', 'Please select which category you wish <b>%s</b> to reside in');
+define('TEXT_MOVE', 'Move <b>%s</b> to:');
+define('TEXT_MOVE_ALL', 'Move all to:');
+
+define('TEXT_NEW_CATEGORY_INTRO', 'Please fill out the following information for the new category.');
+define('TEXT_CATEGORIES_NAME', 'Category Name:');
+define('TEXT_CATEGORIES_IMAGE', 'Category Image:');
+
+define('TEXT_META_TITLE', 'Meta Title:');
+define('TEXT_META_DESCRIPTION', 'Meta Description:');
+define('TEXT_META_KEYWORDS', 'Meta Keywords:');
+
+define('TEXT_SORT_ORDER', 'Sort Order:');
+
+define('TEXT_PRODUCTS_STATUS', 'Products Status:');
+define('TEXT_PRODUCTS_STARTPAGE', 'Show on startpage:');
+define('TEXT_PRODUCTS_STARTPAGE_YES', 'Yes');
+define('TEXT_PRODUCTS_STARTPAGE_NO', 'No');
+define('TEXT_PRODUCTS_STARTPAGE_SORT', 'Sort order (startpage):');
+define('TEXT_PRODUCTS_DATE_AVAILABLE', 'Date Available:');
+define('TEXT_PRODUCT_AVAILABLE', 'In Stock');
+define('TEXT_PRODUCT_NOT_AVAILABLE', 'Out of Stock');
+define('TEXT_PRODUCTS_MANUFACTURER', 'Products Manufacturer:');
+define('TEXT_PRODUCTS_NAME', 'Products Name:');
+define('TEXT_PRODUCTS_DESCRIPTION', 'Products Description:');
+define('TEXT_PRODUCTS_QUANTITY', 'Products Quantity:');
+define('TEXT_PRODUCTS_MODEL', 'Products Model:');
+define('TEXT_PRODUCTS_IMAGE', 'Products Image:');
+define('TEXT_PRODUCTS_URL', 'Products URL:');
+define('TEXT_PRODUCTS_URL_WITHOUT_HTTP', '<small>(without http://)</small>');
+define('TEXT_PRODUCTS_PRICE', 'Products Price:');
+define('TEXT_PRODUCTS_WEIGHT', 'Products Weight:');
+define('TEXT_PRODUCTS_EAN','Barcode/EAN');
+define('TEXT_PRODUCT_LINKED_TO','Linked to:');
+
+define('TEXT_DELETE', 'Delete');
+
+define('EMPTY_CATEGORY', 'Empty Category');
+
+define('TEXT_HOW_TO_COPY', 'Copy Method:');
+define('TEXT_COPY_AS_LINK', 'Link product');
+define('TEXT_COPY_AS_DUPLICATE', 'Duplicate product');
+
+define('ERROR_CANNOT_LINK_TO_SAME_CATEGORY', 'Error: Can not link products in the same directory.');
+define('ERROR_CATALOG_IMAGE_DIRECTORY_NOT_WRITEABLE', 'Error: Catalog images directory is not writeable: ' . DIR_FS_CATALOG_IMAGES);
+define('ERROR_CATALOG_IMAGE_DIRECTORY_DOES_NOT_EXIST', 'Error: Catalog images directory does not exist: ' . DIR_FS_CATALOG_IMAGES);
+
+define('TEXT_PRODUCTS_DISCOUNT_ALLOWED','Discount allowed:');
+define('HEADING_PRICES_OPTIONS','<b>Price options</b>');
+define('HEADING_PRODUCT_IMAGES','<b>Products Images</b>');
+define('TEXT_PRODUCTS_WEIGHT_INFO','<small>(kg)</small>');
+define('TEXT_PRODUCTS_SHORT_DESCRIPTION','Short description:');
+define('TEXT_PRODUCTS_KEYWORDS', 'Extra words for Search:');
+define('TXT_STK','Pcs: ');
+define('TXT_PRICE','a :');
+define('TXT_NETTO','Net price: ');
+define('TEXT_NETTO','Net: ');
+define('TXT_STAFFELPREIS','Graduated Price');
+
+define('HEADING_PRODUCTS_MEDIA','<b>Products Media</b>');
+define('TABLE_HEADING_PRICE','Price');
+
+define('TEXT_CHOOSE_INFO_TEMPLATE','Productdetail Template');
+define('TEXT_SELECT','--Select--');
+define('TEXT_CHOOSE_OPTIONS_TEMPLATE','Productoptions Template');
+define('SAVE_ENTRY','Save ?');
+
+define('TEXT_FSK18','FSK 18:');
+define('TEXT_CHOOSE_INFO_TEMPLATE_CATEGORIE','Template for Category Listing');
+define('TEXT_CHOOSE_INFO_TEMPLATE_LISTING','Template for Product Listing');
+define('TEXT_PRODUCTS_SORT','Sorting:');
+define('TEXT_EDIT_PRODUCT_SORT_ORDER','Product Sorting');
+define('TXT_PRICES','Price');
+define('TXT_NAME','Productname');
+define('TXT_ORDERED','Products ordered');
+define('TXT_SORT','Sorting');
+define('TXT_WEIGHT','Weight');
+define('TXT_QTY','On Stock');
+
+define('TEXT_MULTICOPY','Multiple');
+define('TEXT_MULTICOPY_DESC','Copy elements into following categories (If one box selected, Single settings will be ignored.)');
+define('TEXT_SINGLECOPY','Single');
+define('TEXT_SINGLECOPY_DESC','Copy elements into following category');
+define('TEXT_SINGLECOPY_CATEGORY','Category:');
+
+define('TEXT_PRODUCTS_VPE','Unit');
+define('TEXT_PRODUCTS_VPE_VISIBLE','Show Unit Price:');
+define('TEXT_PRODUCTS_VPE_VALUE',' Value:');
+
+define('CROSS_SELLING','Cross selling for article');
+define('CROSS_SELLING_SEARCH','Search product:');
+define('BUTTON_EDIT_CROSS_SELLING','Cross selling');
+define('HEADING_DEL','delete');
+define('HEADING_SORTING','sorting');
+define('HEADING_MODEL','model');
+define('HEADING_NAME','article');
+define('HEADING_CATEGORY','category');
+define('HEADING_ADD','Add?');
+define('HEADING_GROUP','Group');
+
+define('TEXT_PRODUCTS_LENGTH', 'Products Length:');
+define('TEXT_PRODUCTS_WIDTH', 'Products Width:');
+define('TEXT_PRODUCTS_HEIGHT', 'Products Height:');
+define('TEXT_PRODUCTS_WIDTH_INFO','<small>(cm)</small>');
+define('TEXT_PRODUCTS_LENGTH_INFO','<small>(cm)</small>');
+define('TEXT_PRODUCTS_HEIGHT_INFO','<small>(cm)</small>');
+define('TXT_WIDTH','Width');
+define('TXT_LENGTH','Length');
+define('TXT_HEIGHT','Height');
+
 ?>
\ No newline at end of file
diff --git a/lang/german/admin/categories.php b/lang/german/admin/categories.php
index f7387b2..5d3709d 100644
--- a/lang/german/admin/categories.php
+++ b/lang/german/admin/categories.php
@@ -1,187 +1,198 @@
-<?php
-/* --------------------------------------------------------------
-   $Id: categories.php 1249 2005-09-27 12:06:40Z gwinger $   
-
-   XT-Commerce - community made shopping
-   http://www.xt-commerce.com
-
-   Copyright (c) 2003 XT-Commerce
-   --------------------------------------------------------------
-   based on: 
-   (c) 2000-2001 The Exchange Project  (earlier name of osCommerce)
-   (c) 2002-2003 osCommerce(categories.php,v 1.22 2002/08/17); www.oscommerce.com 
-   (c) 2003	 nextcommerce (categories.php,v 1.10 2003/08/14); www.nextcommerce.org
-
-   Released under the GNU General Public License 
-   --------------------------------------------------------------*/
-   
-define('TEXT_EDIT_STATUS', 'Status');
-define('HEADING_TITLE', 'Kategorien / Artikel');
-define('HEADING_TITLE_SEARCH', 'Suche: ');
-define('HEADING_TITLE_GOTO', 'Gehe zu:');
-
-define('TABLE_HEADING_ID', 'ID');
-define('TABLE_HEADING_CATEGORIES_PRODUCTS', 'Kategorien / Artikel');
-define('TABLE_HEADING_ACTION', 'Aktion');
-define('TABLE_HEADING_STATUS', 'Status');
-define('TABLE_HEADING_STARTPAGE', 'TOP');
-define('TABLE_HEADING_STOCK','Lager Warnung');
-define('TABLE_HEADING_SORT','Sort.');
-define('TABLE_HEADING_EDIT','Edit');
-
-define('TEXT_ACTIVE_ELEMENT','Aktives Element');
-define('TEXT_MARKED_ELEMENTS','Markierte Elemente');
-define('TEXT_INFORMATIONS','Informationen');
-define('TEXT_INSERT_ELEMENT','Neues Element');
-
-define('TEXT_WARN_MAIN','Haupt');
-define('TEXT_NEW_PRODUCT', 'Neuer Artikel in &quot;%s&quot;');
-define('TEXT_CATEGORIES', 'Kategorien:');
-define('TEXT_PRODUCTS', 'Produkte:');
-define('TEXT_PRODUCTS_PRICE_INFO', 'Preis:');
-define('TEXT_PRODUCTS_TAX_CLASS', 'Steuerklasse:');
-define('TEXT_PRODUCTS_AVERAGE_RATING', 'Durchschn. Bewertung:');
-define('TEXT_PRODUCTS_QUANTITY_INFO', 'Anzahl:');
-define('TEXT_PRODUCTS_DISCOUNT_ALLOWED_INFO', 'Maximal erlaubter Rabatt:');
-define('TEXT_DATE_ADDED', 'Hinzugef&uuml;gt am:');
-define('TEXT_DATE_AVAILABLE', 'Erscheinungsdatum:');
-define('TEXT_LAST_MODIFIED', 'Letzte &Auml;nderung:');
-define('TEXT_IMAGE_NONEXISTENT', 'Bild existiert nicht');
-define('TEXT_NO_CHILD_CATEGORIES_OR_PRODUCTS', 'Bitte f&uuml;gen Sie eine neue Kategorie oder einen Artikel in <strong>%s</strong> ein.');
-define('TEXT_PRODUCT_MORE_INFORMATION', 'F&uuml;r weitere Informationen, besuchen Sie bitte die <a href="http://%s" target="blank"><u>Homepage</u></a> des Herstellers.');
-define('TEXT_PRODUCT_DATE_ADDED', 'Diesen Artikel haben wir am %s in unseren Katalog aufgenommen.');
-define('TEXT_PRODUCT_DATE_AVAILABLE', 'Dieser Artikel ist erh&auml;ltlich ab %s.');
-define('TEXT_CHOOSE_INFO_TEMPLATE', 'Artikel-Info Vorlage:');
-define('TEXT_CHOOSE_OPTIONS_TEMPLATE', 'Artikel-Optionen Vorlage:');
-define('TEXT_SELECT', 'Bitte ausw&auml;hlen:');
-
-define('TEXT_EDIT_INTRO', 'Bitte f&uuml;hren Sie alle notwendigen &Auml;nderungen durch.');
-define('TEXT_EDIT_CATEGORIES_ID', 'Kategorie ID:');
-define('TEXT_EDIT_CATEGORIES_NAME', 'Kategorie Name:');
-define('TEXT_EDIT_CATEGORIES_HEADING_TITLE', 'Kategorie &Uuml;berschrift:');
-define('TEXT_EDIT_CATEGORIES_DESCRIPTION', 'Kategorie Beschreibung:');
-define('TEXT_EDIT_CATEGORIES_IMAGE', 'Kategorie Bild:');
-
-define('TEXT_EDIT_SORT_ORDER', 'Sortierreihenfolge:');
-
-define('TEXT_INFO_COPY_TO_INTRO', 'Bitte w&auml;hlen Sie eine neue Kategorie aus, in die Sie den Artikel kopieren m&ouml;chten:');
-define('TEXT_INFO_CURRENT_CATEGORIES', 'Aktuelle Kategorien:');
-
-define('TEXT_INFO_HEADING_NEW_CATEGORY', 'Neue Kategorie');
-define('TEXT_INFO_HEADING_EDIT_CATEGORY', 'Kategorie bearbeiten');
-define('TEXT_INFO_HEADING_DELETE_CATEGORY', 'Kategorie l&ouml;schen');
-define('TEXT_INFO_HEADING_MOVE_CATEGORY', 'Kategorie verschieben');
-define('TEXT_INFO_HEADING_DELETE_PRODUCT', 'Artikel l&ouml;schen');
-define('TEXT_INFO_HEADING_MOVE_PRODUCT', 'Artikel verschieben');
-define('TEXT_INFO_HEADING_COPY_TO', 'Kopieren nach');
-define('TEXT_INFO_HEADING_MOVE_ELEMENTS', 'Elemente verschieben');
-define('TEXT_INFO_HEADING_DELETE_ELEMENTS', 'Elemente l&ouml;schen');
-
-define('TEXT_DELETE_CATEGORY_INTRO', 'Sind Sie sicher, dass Sie diese Kategorie l&ouml;schen m&ouml;chten?');
-define('TEXT_DELETE_PRODUCT_INTRO', 'Sind Sie sicher, dass Sie diesen Artikel l&ouml;schen m&ouml;chten?');
-
-define('TEXT_DELETE_WARNING_CHILDS', '<b>WARNUNG:</b> Es existieren noch %s (Unter-)Kategorien, die mit dieser Kategorie verbunden sind!');
-define('TEXT_DELETE_WARNING_PRODUCTS', '<b>WARNUNG:</b> Es existieren noch %s Artikel, die mit dieser Kategorie verbunden sind!');
-
-define('TEXT_MOVE_WARNING_CHILDS', '<b>Info:</b> Es existieren noch %s (Unter-)Kategorien, die mit dieser Kategorie verbunden sind!');
-define('TEXT_MOVE_WARNING_PRODUCTS', '<b>Info:</b> Es existieren noch %s Artikel, die mit dieser Kategorie verbunden sind!');
-
-define('TEXT_MOVE_PRODUCTS_INTRO', 'Bitte w&auml;hlen Sie die &uuml;bergordnete Kategorie, in die Sie <b>%s</b> verschieben m&ouml;chten');
-define('TEXT_MOVE_CATEGORIES_INTRO', 'Bitte w&auml;hlen Sie die &uuml;bergordnete Kategorie, in die Sie <b>%s</b> verschieben m&ouml;chten');
-define('TEXT_MOVE', 'Verschiebe <b>%s</b> nach:');
-define('TEXT_MOVE_ALL', 'Verschiebe alle nach:');
-
-define('TEXT_NEW_CATEGORY_INTRO', 'Bitte geben Sie die neue Kategorie mit allen relevanten Daten ein.');
-define('TEXT_CATEGORIES_NAME', 'Kategorie Name:');
-define('TEXT_CATEGORIES_IMAGE', 'Kategorie Bild:');
-
-define('TEXT_META_TITLE', 'Meta Title:');
-define('TEXT_META_DESCRIPTION', 'Meta Description:');
-define('TEXT_META_KEYWORDS', 'Meta Keywords:');
-
-define('TEXT_SORT_ORDER', 'Sortierreihenfolge:');
-
-define('TEXT_PRODUCTS_STATUS', 'Artikelstatus:');
-define('TEXT_PRODUCTS_STARTPAGE', 'Auf Startseite zeigen:');
-define('TEXT_PRODUCTS_STARTPAGE_YES', 'Ja');
-define('TEXT_PRODUCTS_STARTPAGE_NO', 'Nein');
-define('TEXT_PRODUCTS_STARTPAGE_SORT', 'Reihung (Startseite):');
-define('TEXT_PRODUCTS_DATE_AVAILABLE', 'Erscheinungsdatum:');
-define('TEXT_PRODUCT_AVAILABLE', 'Auf Lager');
-define('TEXT_PRODUCT_NOT_AVAILABLE', 'Nicht Vorr&auml;tig');
-define('TEXT_PRODUCTS_MANUFACTURER', 'Artikelhersteller:');
-define('TEXT_PRODUCTS_NAME', 'Artikelname:');
-define('TEXT_PRODUCTS_DESCRIPTION', 'Artikelbeschreibung:');
-define('TEXT_PRODUCTS_QUANTITY', 'Artikelanzahl:');
-define('TEXT_PRODUCTS_MODEL', 'Artikel-Nr.:');
-define('TEXT_PRODUCTS_IMAGE', 'Artikelbild:');
-define('TEXT_PRODUCTS_URL', 'Herstellerlink:');
-define('TEXT_PRODUCTS_URL_WITHOUT_HTTP', '<small>(ohne f&uuml;hrendes http://)</small>');
-define('TEXT_PRODUCTS_PRICE', 'Artikelpreis:');
-define('TEXT_PRODUCTS_WEIGHT', 'Artikelgewicht:');
-define('TEXT_PRODUCTS_EAN','Barcode/EAN');
-define('TEXT_PRODUCT_LINKED_TO','Verlinkt in:');
-define('TEXT_DELETE', 'L&ouml;schen');
-
-define('EMPTY_CATEGORY', 'Leere Kategorie');
-
-define('ERROR_CANNOT_LINK_TO_SAME_CATEGORY', 'Fehler: Artikel k&ouml;nnen nicht in der gleichen Kategorie verlinkt werden.');
-define('ERROR_CATALOG_IMAGE_DIRECTORY_NOT_WRITEABLE', 'Fehler: Das Verzeichnis \'images\' im Katalogverzeichnis ist schreibgesch&uuml;tzt: ' . DIR_FS_CATALOG_IMAGES);
-define('ERROR_CATALOG_IMAGE_DIRECTORY_DOES_NOT_EXIST', 'Fehler: Das Verzeichnis \'images\' im Katalogverzeichnis ist nicht vorhanden: ' . DIR_FS_CATALOG_IMAGES);
-
-define('TEXT_PRODUCTS_DISCOUNT_ALLOWED','Rabatt erlaubt:');
-define('HEADING_PRICES_OPTIONS','<b>Preis-Optionen</b>');
-define('HEADING_PRODUCT_IMAGES','<b>Artikel-Bilder</b>');
-define('TEXT_PRODUCTS_WEIGHT_INFO','<small>(kg)</small>');
-define('TEXT_PRODUCTS_SHORT_DESCRIPTION','Kurzbeschreibung:');
-define('TEXT_PRODUCTS_KEYWORDS', 'Zusatz-Begriffe f&uuml;r Suche:');
-define('TXT_STK','Stk: ');
-define('TXT_PRICE','a :');
-define('TXT_NETTO','Nettopreis: ');
-define('TEXT_NETTO','Netto: ');
-define('TXT_STAFFELPREIS','Staffelpreise');
-
-define('HEADING_PRODUCTS_MEDIA','<b>Artikelmedium</b>');
-define('TABLE_HEADING_PRICE','Preis');
-
-define('TEXT_CHOOSE_INFO_TEMPLATE','Artikel-Details Vorlage');
-define('TEXT_SELECT','--bitte w&auml;hlen--');
-define('TEXT_CHOOSE_OPTIONS_TEMPLATE','Optionen-Details Vorlage');
-define('SAVE_ENTRY','Speichern ?');
-
-define('TEXT_FSK18','FSK 18:');
-define('TEXT_CHOOSE_INFO_TEMPLATE_CATEGORIE','Vorlage f&uuml;r Kategorie&uuml;bersicht');
-define('TEXT_CHOOSE_INFO_TEMPLATE_LISTING','Vorlage f&uuml;r Artikel&uuml;bersicht');
-define('TEXT_PRODUCTS_SORT','Reihung:');
-define('TEXT_EDIT_PRODUCT_SORT_ORDER','Artikel-Sortierung');
-define('TXT_PRICES','Preis');
-define('TXT_NAME','Artikelname');
-define('TXT_ORDERED','Bestellte Artikel');
-define('TXT_SORT','Reihung');
-define('TXT_WEIGHT','Gewicht');
-define('TXT_QTY','Auf Lager');
-
-define('TEXT_MULTICOPY','Mehrfach');
-define('TEXT_MULTICOPY_DESC','Elemente in folgende Kategorien kopieren:<br />(Falls ausgew&auml;hlt werden Einstellungen von "Einfach" ignoriert.)');
-define('TEXT_SINGLECOPY','Einfach');
-define('TEXT_SINGLECOPY_DESC','Elemente in folgende Kategorie kopieren:<br />(Daf&uuml;r darf unter "Mehrfach" keine Kategorie aktiviert sein.)');
-define('TEXT_SINGLECOPY_CATEGORY','Kategorie:');
-define('TEXT_HOW_TO_COPY', 'Kopiermethode:');
-define('TEXT_COPY_AS_LINK', 'Verlinken');
-define('TEXT_COPY_AS_DUPLICATE', 'Duplizieren');
-
-define('TEXT_PRODUCTS_VPE','VPE');
-define('TEXT_PRODUCTS_VPE_VISIBLE','Anzeige VPE:');
-define('TEXT_PRODUCTS_VPE_VALUE',' Wert:');
-
-define('CROSS_SELLING','Cross Selling f&uuml;r Artikel');
-define('CROSS_SELLING_SEARCH','Produktsuche:');
-define('BUTTON_EDIT_CROSS_SELLING','Cross Selling');
-define('HEADING_DEL','L&ouml;schen');
-define('HEADING_ADD','Hinzuf&uuml;gen?');
-define('HEADING_GROUP','Gruppe');
-define('HEADING_SORTING','Reihung');
-define('HEADING_MODEL','Artikelnummer');
-define('HEADING_NAME','Artikel');
-define('HEADING_CATEGORY','Kategorie');
+<?php
+/* --------------------------------------------------------------
+   $Id: categories.php 1249 2005-09-27 12:06:40Z gwinger $   
+
+   XT-Commerce - community made shopping
+   http://www.xt-commerce.com
+
+   Copyright (c) 2003 XT-Commerce
+   --------------------------------------------------------------
+   based on: 
+   (c) 2000-2001 The Exchange Project  (earlier name of osCommerce)
+   (c) 2002-2003 osCommerce(categories.php,v 1.22 2002/08/17); www.oscommerce.com 
+   (c) 2003	 nextcommerce (categories.php,v 1.10 2003/08/14); www.nextcommerce.org
+
+   Released under the GNU General Public License 
+   --------------------------------------------------------------*/
+   
+define('TEXT_EDIT_STATUS', 'Status');
+define('HEADING_TITLE', 'Kategorien / Artikel');
+define('HEADING_TITLE_SEARCH', 'Suche: ');
+define('HEADING_TITLE_GOTO', 'Gehe zu:');
+
+define('TABLE_HEADING_ID', 'ID');
+define('TABLE_HEADING_CATEGORIES_PRODUCTS', 'Kategorien / Artikel');
+define('TABLE_HEADING_ACTION', 'Aktion');
+define('TABLE_HEADING_STATUS', 'Status');
+define('TABLE_HEADING_STARTPAGE', 'TOP');
+define('TABLE_HEADING_STOCK','Lager Warnung');
+define('TABLE_HEADING_SORT','Sort.');
+define('TABLE_HEADING_EDIT','Edit');
+
+define('TEXT_ACTIVE_ELEMENT','Aktives Element');
+define('TEXT_MARKED_ELEMENTS','Markierte Elemente');
+define('TEXT_INFORMATIONS','Informationen');
+define('TEXT_INSERT_ELEMENT','Neues Element');
+
+define('TEXT_WARN_MAIN','Haupt');
+define('TEXT_NEW_PRODUCT', 'Neuer Artikel in &quot;%s&quot;');
+define('TEXT_CATEGORIES', 'Kategorien:');
+define('TEXT_PRODUCTS', 'Produkte:');
+define('TEXT_PRODUCTS_PRICE_INFO', 'Preis:');
+define('TEXT_PRODUCTS_TAX_CLASS', 'Steuerklasse:');
+define('TEXT_PRODUCTS_AVERAGE_RATING', 'Durchschn. Bewertung:');
+define('TEXT_PRODUCTS_QUANTITY_INFO', 'Anzahl:');
+define('TEXT_PRODUCTS_DISCOUNT_ALLOWED_INFO', 'Maximal erlaubter Rabatt:');
+define('TEXT_DATE_ADDED', 'Hinzugef&uuml;gt am:');
+define('TEXT_DATE_AVAILABLE', 'Erscheinungsdatum:');
+define('TEXT_LAST_MODIFIED', 'Letzte &Auml;nderung:');
+define('TEXT_IMAGE_NONEXISTENT', 'Bild existiert nicht');
+define('TEXT_NO_CHILD_CATEGORIES_OR_PRODUCTS', 'Bitte f&uuml;gen Sie eine neue Kategorie oder einen Artikel in <strong>%s</strong> ein.');
+define('TEXT_PRODUCT_MORE_INFORMATION', 'F&uuml;r weitere Informationen, besuchen Sie bitte die <a href="http://%s" target="blank"><u>Homepage</u></a> des Herstellers.');
+define('TEXT_PRODUCT_DATE_ADDED', 'Diesen Artikel haben wir am %s in unseren Katalog aufgenommen.');
+define('TEXT_PRODUCT_DATE_AVAILABLE', 'Dieser Artikel ist erh&auml;ltlich ab %s.');
+define('TEXT_CHOOSE_INFO_TEMPLATE', 'Artikel-Info Vorlage:');
+define('TEXT_CHOOSE_OPTIONS_TEMPLATE', 'Artikel-Optionen Vorlage:');
+define('TEXT_SELECT', 'Bitte ausw&auml;hlen:');
+
+define('TEXT_EDIT_INTRO', 'Bitte f&uuml;hren Sie alle notwendigen &Auml;nderungen durch.');
+define('TEXT_EDIT_CATEGORIES_ID', 'Kategorie ID:');
+define('TEXT_EDIT_CATEGORIES_NAME', 'Kategorie Name:');
+define('TEXT_EDIT_CATEGORIES_HEADING_TITLE', 'Kategorie &Uuml;berschrift:');
+define('TEXT_EDIT_CATEGORIES_DESCRIPTION', 'Kategorie Beschreibung:');
+define('TEXT_EDIT_CATEGORIES_IMAGE', 'Kategorie Bild:');
+
+define('TEXT_EDIT_SORT_ORDER', 'Sortierreihenfolge:');
+
+define('TEXT_INFO_COPY_TO_INTRO', 'Bitte w&auml;hlen Sie eine neue Kategorie aus, in die Sie den Artikel kopieren m&ouml;chten:');
+define('TEXT_INFO_CURRENT_CATEGORIES', 'Aktuelle Kategorien:');
+
+define('TEXT_INFO_HEADING_NEW_CATEGORY', 'Neue Kategorie');
+define('TEXT_INFO_HEADING_EDIT_CATEGORY', 'Kategorie bearbeiten');
+define('TEXT_INFO_HEADING_DELETE_CATEGORY', 'Kategorie l&ouml;schen');
+define('TEXT_INFO_HEADING_MOVE_CATEGORY', 'Kategorie verschieben');
+define('TEXT_INFO_HEADING_DELETE_PRODUCT', 'Artikel l&ouml;schen');
+define('TEXT_INFO_HEADING_MOVE_PRODUCT', 'Artikel verschieben');
+define('TEXT_INFO_HEADING_COPY_TO', 'Kopieren nach');
+define('TEXT_INFO_HEADING_MOVE_ELEMENTS', 'Elemente verschieben');
+define('TEXT_INFO_HEADING_DELETE_ELEMENTS', 'Elemente l&ouml;schen');
+
+define('TEXT_DELETE_CATEGORY_INTRO', 'Sind Sie sicher, dass Sie diese Kategorie l&ouml;schen m&ouml;chten?');
+define('TEXT_DELETE_PRODUCT_INTRO', 'Sind Sie sicher, dass Sie diesen Artikel l&ouml;schen m&ouml;chten?');
+
+define('TEXT_DELETE_WARNING_CHILDS', '<b>WARNUNG:</b> Es existieren noch %s (Unter-)Kategorien, die mit dieser Kategorie verbunden sind!');
+define('TEXT_DELETE_WARNING_PRODUCTS', '<b>WARNUNG:</b> Es existieren noch %s Artikel, die mit dieser Kategorie verbunden sind!');
+
+define('TEXT_MOVE_WARNING_CHILDS', '<b>Info:</b> Es existieren noch %s (Unter-)Kategorien, die mit dieser Kategorie verbunden sind!');
+define('TEXT_MOVE_WARNING_PRODUCTS', '<b>Info:</b> Es existieren noch %s Artikel, die mit dieser Kategorie verbunden sind!');
+
+define('TEXT_MOVE_PRODUCTS_INTRO', 'Bitte w&auml;hlen Sie die &uuml;bergordnete Kategorie, in die Sie <b>%s</b> verschieben m&ouml;chten');
+define('TEXT_MOVE_CATEGORIES_INTRO', 'Bitte w&auml;hlen Sie die &uuml;bergordnete Kategorie, in die Sie <b>%s</b> verschieben m&ouml;chten');
+define('TEXT_MOVE', 'Verschiebe <b>%s</b> nach:');
+define('TEXT_MOVE_ALL', 'Verschiebe alle nach:');
+
+define('TEXT_NEW_CATEGORY_INTRO', 'Bitte geben Sie die neue Kategorie mit allen relevanten Daten ein.');
+define('TEXT_CATEGORIES_NAME', 'Kategorie Name:');
+define('TEXT_CATEGORIES_IMAGE', 'Kategorie Bild:');
+
+define('TEXT_META_TITLE', 'Meta Title:');
+define('TEXT_META_DESCRIPTION', 'Meta Description:');
+define('TEXT_META_KEYWORDS', 'Meta Keywords:');
+
+define('TEXT_SORT_ORDER', 'Sortierreihenfolge:');
+
+define('TEXT_PRODUCTS_STATUS', 'Artikelstatus:');
+define('TEXT_PRODUCTS_STARTPAGE', 'Auf Startseite zeigen:');
+define('TEXT_PRODUCTS_STARTPAGE_YES', 'Ja');
+define('TEXT_PRODUCTS_STARTPAGE_NO', 'Nein');
+define('TEXT_PRODUCTS_STARTPAGE_SORT', 'Reihung (Startseite):');
+define('TEXT_PRODUCTS_DATE_AVAILABLE', 'Erscheinungsdatum:');
+define('TEXT_PRODUCT_AVAILABLE', 'Auf Lager');
+define('TEXT_PRODUCT_NOT_AVAILABLE', 'Nicht Vorr&auml;tig');
+define('TEXT_PRODUCTS_MANUFACTURER', 'Artikelhersteller:');
+define('TEXT_PRODUCTS_NAME', 'Artikelname:');
+define('TEXT_PRODUCTS_DESCRIPTION', 'Artikelbeschreibung:');
+define('TEXT_PRODUCTS_QUANTITY', 'Artikelanzahl:');
+define('TEXT_PRODUCTS_MODEL', 'Artikel-Nr.:');
+define('TEXT_PRODUCTS_IMAGE', 'Artikelbild:');
+define('TEXT_PRODUCTS_URL', 'Herstellerlink:');
+define('TEXT_PRODUCTS_URL_WITHOUT_HTTP', '<small>(ohne f&uuml;hrendes http://)</small>');
+define('TEXT_PRODUCTS_PRICE', 'Artikelpreis:');
+define('TEXT_PRODUCTS_WEIGHT', 'Artikelgewicht:');
+define('TEXT_PRODUCTS_EAN','Barcode/EAN');
+define('TEXT_PRODUCT_LINKED_TO','Verlinkt in:');
+define('TEXT_DELETE', 'L&ouml;schen');
+
+define('EMPTY_CATEGORY', 'Leere Kategorie');
+
+define('ERROR_CANNOT_LINK_TO_SAME_CATEGORY', 'Fehler: Artikel k&ouml;nnen nicht in der gleichen Kategorie verlinkt werden.');
+define('ERROR_CATALOG_IMAGE_DIRECTORY_NOT_WRITEABLE', 'Fehler: Das Verzeichnis \'images\' im Katalogverzeichnis ist schreibgesch&uuml;tzt: ' . DIR_FS_CATALOG_IMAGES);
+define('ERROR_CATALOG_IMAGE_DIRECTORY_DOES_NOT_EXIST', 'Fehler: Das Verzeichnis \'images\' im Katalogverzeichnis ist nicht vorhanden: ' . DIR_FS_CATALOG_IMAGES);
+
+define('TEXT_PRODUCTS_DISCOUNT_ALLOWED','Rabatt erlaubt:');
+define('HEADING_PRICES_OPTIONS','<b>Preis-Optionen</b>');
+define('HEADING_PRODUCT_IMAGES','<b>Artikel-Bilder</b>');
+define('TEXT_PRODUCTS_WEIGHT_INFO','<small>(kg)</small>');
+define('TEXT_PRODUCTS_SHORT_DESCRIPTION','Kurzbeschreibung:');
+define('TEXT_PRODUCTS_KEYWORDS', 'Zusatz-Begriffe f&uuml;r Suche:');
+define('TXT_STK','Stk: ');
+define('TXT_PRICE','a :');
+define('TXT_NETTO','Nettopreis: ');
+define('TEXT_NETTO','Netto: ');
+define('TXT_STAFFELPREIS','Staffelpreise');
+
+define('HEADING_PRODUCTS_MEDIA','<b>Artikelmedium</b>');
+define('TABLE_HEADING_PRICE','Preis');
+
+define('TEXT_CHOOSE_INFO_TEMPLATE','Artikel-Details Vorlage');
+define('TEXT_SELECT','--bitte w&auml;hlen--');
+define('TEXT_CHOOSE_OPTIONS_TEMPLATE','Optionen-Details Vorlage');
+define('SAVE_ENTRY','Speichern ?');
+
+define('TEXT_FSK18','FSK 18:');
+define('TEXT_CHOOSE_INFO_TEMPLATE_CATEGORIE','Vorlage f&uuml;r Kategorie&uuml;bersicht');
+define('TEXT_CHOOSE_INFO_TEMPLATE_LISTING','Vorlage f&uuml;r Artikel&uuml;bersicht');
+define('TEXT_PRODUCTS_SORT','Reihung:');
+define('TEXT_EDIT_PRODUCT_SORT_ORDER','Artikel-Sortierung');
+define('TXT_PRICES','Preis');
+define('TXT_NAME','Artikelname');
+define('TXT_ORDERED','Bestellte Artikel');
+define('TXT_SORT','Reihung');
+define('TXT_WEIGHT','Gewicht');
+define('TXT_QTY','Auf Lager');
+
+define('TEXT_MULTICOPY','Mehrfach');
+define('TEXT_MULTICOPY_DESC','Elemente in folgende Kategorien kopieren:<br />(Falls ausgew&auml;hlt werden Einstellungen von "Einfach" ignoriert.)');
+define('TEXT_SINGLECOPY','Einfach');
+define('TEXT_SINGLECOPY_DESC','Elemente in folgende Kategorie kopieren:<br />(Daf&uuml;r darf unter "Mehrfach" keine Kategorie aktiviert sein.)');
+define('TEXT_SINGLECOPY_CATEGORY','Kategorie:');
+define('TEXT_HOW_TO_COPY', 'Kopiermethode:');
+define('TEXT_COPY_AS_LINK', 'Verlinken');
+define('TEXT_COPY_AS_DUPLICATE', 'Duplizieren');
+
+define('TEXT_PRODUCTS_VPE','VPE');
+define('TEXT_PRODUCTS_VPE_VISIBLE','Anzeige VPE:');
+define('TEXT_PRODUCTS_VPE_VALUE',' Wert:');
+
+define('CROSS_SELLING','Cross Selling f&uuml;r Artikel');
+define('CROSS_SELLING_SEARCH','Produktsuche:');
+define('BUTTON_EDIT_CROSS_SELLING','Cross Selling');
+define('HEADING_DEL','L&ouml;schen');
+define('HEADING_ADD','Hinzuf&uuml;gen?');
+define('HEADING_GROUP','Gruppe');
+define('HEADING_SORTING','Reihung');
+define('HEADING_MODEL','Artikelnummer');
+define('HEADING_NAME','Artikel');
+define('HEADING_CATEGORY','Kategorie');
+
+define('TEXT_PRODUCTS_WIDTH', 'Breite:');
+define('TEXT_PRODUCTS_LENGTH', 'L&auml;nge:');
+define('TEXT_PRODUCTS_HEIGHT', 'H&ouml;he:');
+define('TEXT_PRODUCTS_WIDTH_INFO','<small>(cm)</small>');
+define('TEXT_PRODUCTS_LENGTH_INFO','<small>(cm)</small>');
+define('TEXT_PRODUCTS_HEIGHT_INFO','<small>(cm)</small>');
+define('TXT_WIDTH','Breite');
+define('TXT_HEIGHT','H&ouml;he');
+define('TXT_LENGTH','L&auml;nge');
+
 ?>
\ No newline at end of file
-- 
1.7.8.3

